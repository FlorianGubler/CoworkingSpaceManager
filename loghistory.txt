commit aabdba127ab53f867e8ec9b917dab5142ab729cb
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 16:18:28 2022 +0200

    Fixing & Testing Implementation

diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 195119d..c800e6c 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -9,6 +9,8 @@ import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
 import io.swagger.v3.oas.annotations.tags.Tag;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
@@ -30,6 +32,8 @@ public class BookingController {
     private final BookingService bookingService;
     private final MemberService memberService;
 
+    Logger LOG = LoggerFactory.getLogger(getClass());
+
     BookingController(BookingService bookingService, MemberService memberService) {
         this.bookingService = bookingService;
         this.memberService = memberService;
@@ -93,7 +97,8 @@ public class BookingController {
             booking.setStatus(BookingStatus.ORDERED);
         }
         BookingEntity response = bookingService.create(booking);
-        if(!UUID.fromString(authentication.getName()).equals(response.getMember().getId()) || !getRolesSet(authentication).contains("ROLE_ADMIN")){
+
+        if(!(UUID.fromString(authentication.getName()).equals(response.getMember().getId()) && getRolesSet(authentication).contains("ROLE_ADMIN"))){
             response.setMember(null);
         }
         return response;
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java
index 1553aa7..f3c5e07 100644
--- a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java
@@ -2,46 +2,54 @@ package com.github.floriangubler.coworkspacemgr;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.entity.BookingEntityReq;
+import com.github.floriangubler.coworkspacemgr.entity.BookingStatus;
+import com.github.floriangubler.coworkspacemgr.entity.BookingTime;
 import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.*;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
 
+import java.sql.Date;
+import java.time.Instant;
 import java.util.List;
 import java.util.UUID;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @SpringBootTest
 @AutoConfigureMockMvc
+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
 public class CoworkspaceAdminIntegrationTest {
 
 	@Autowired
 	private MockMvc mockMvc;
 
-	@Autowired
-	private static JwtServiceHMAC jwtService;
-
 	@Autowired
 	private ObjectMapper objectMapper;
 
 	private static String accesstoken;
+	private static UUID userid = UUID.fromString("9135f12e-1b66-4ee6-bbae-df37303cc154");
+
+	private static UUID bookingid;
 
 	@BeforeAll
-	public static void jwtauth(){
-		accesstoken = jwtService.createNewJWT(UUID.randomUUID().toString(), "9135f12e-1b66-4ee6-bbae-df37303cc154", "admin", List.of("ADMIN"));
+	public static void jwtauth(@Autowired JwtServiceHMAC jwtService){
+		accesstoken = jwtService.createNewJWT(UUID.randomUUID().toString(), userid.toString(), "admin", List.of("ADMIN"));
 	}
 
 
 	@Test
+	@Order(1)
 	public void getbookings() throws Exception {
 
 		val response = mockMvc.perform(get("/api/bookings").header("Authorization", "Bearer " + accesstoken))
@@ -54,4 +62,57 @@ public class CoworkspaceAdminIntegrationTest {
 		assertEquals(4, bookings.size());
 	}
 
+	@Test
+	@Order(2)
+	public void getmybookings() throws Exception {
+
+		val response = mockMvc.perform(get("/api/bookings/?onlymy=true").header("Authorization", "Bearer " + accesstoken))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		List<BookingEntity> bookings = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+
+		assertEquals(3, bookings.size());
+	}
+
+	@Test
+	@Order(3)
+	public void createbooking() throws Exception {
+		BookingEntityReq bookingreq = new BookingEntityReq();
+		bookingreq.setMemberId(userid);
+		bookingreq.setDate(Date.from(Instant.now()));
+		bookingreq.setTime(BookingTime.AFTERNOON);
+		val response = mockMvc.perform(post("/api/bookings").header("Authorization", "Bearer " + accesstoken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(bookingreq)))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		BookingEntity booking = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+		bookingid = booking.getId();
+
+		assertEquals(booking.getTime(), BookingTime.AFTERNOON);
+		assertEquals(booking.getStatus(), BookingStatus.APPROVED);
+	}
+
+	@Test
+	@Order(4)
+	public void updatebooking() throws Exception {
+
+		BookingEntityReq bookingreq = new BookingEntityReq();
+		bookingreq.setMemberId(userid);
+		bookingreq.setDate(Date.from(Instant.now()));
+		bookingreq.setTime(BookingTime.AFTERNOON);
+		bookingreq.setStatus(BookingStatus.DECLINED);
+		val response = mockMvc.perform(put("/api/bookings/" + bookingid.toString()).header("Authorization", "Bearer " + accesstoken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(bookingreq)))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		BookingEntity booking = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+
+		assertEquals(booking.getTime(), BookingTime.AFTERNOON);
+		assertEquals(booking.getStatus(), BookingStatus.DECLINED);
+	}
+
 }
\ No newline at end of file
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java
index b65866e..1c33acc 100644
--- a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java
@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.entity.BookingEntityReq;
+import com.github.floriangubler.coworkspacemgr.entity.BookingStatus;
 import com.github.floriangubler.coworkspacemgr.entity.BookingTime;
 import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
@@ -92,6 +93,7 @@ public class CoworkspaceMemberIntegrationTest {
 
 		assertNull(booking.getMember()); //Anonymisiation
 		assertEquals(booking.getTime(), BookingTime.AFTERNOON);
+		assertEquals(booking.getStatus(), BookingStatus.ORDERED);
 	}
 
 	@Test
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java
index a70cc01..4ecda75 100644
--- a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java
@@ -2,8 +2,10 @@ package com.github.floriangubler.coworkspacemgr;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntityReq;
 import com.github.floriangubler.coworkspacemgr.entity.MemberDTO;
 import com.github.floriangubler.coworkspacemgr.entity.TokenResponse;
+import lombok.val;
 import org.junit.jupiter.api.*;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
@@ -11,6 +13,8 @@ import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
 
+import java.util.List;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@@ -71,4 +75,24 @@ public class CoworkspaceUserIntegrationTest {
 				.andReturn();
 	}
 
+	@Test
+	@Order(4)
+	public void getbookingserror() throws Exception {
+
+		val response = mockMvc.perform(get("/api/bookings"))
+				.andExpect(status().isUnauthorized())
+				.andDo(print())
+				.andReturn();
+	}
+
+	@Test
+	@Order(5)
+	public void getmemberserror() throws Exception {
+
+		val response = mockMvc.perform(get("/api/members"))
+				.andExpect(status().isUnauthorized())
+				.andDo(print())
+				.andReturn();
+	}
+
 }
\ No newline at end of file

commit 35d157d545901ab704610c8fb3c7b65451f99eb9
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 15:52:52 2022 +0200

    Fixing & Testing Implementation

diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
index e8ee122..c270d96 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
@@ -1,5 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.entity;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Getter;
@@ -34,6 +35,7 @@ public class BookingEntity implements Serializable {
 
     @ManyToOne
     @JoinColumn(name = "member", nullable = false)
+    @JsonIgnore
     @Schema(accessMode = Schema.AccessMode.READ_ONLY)
     private MemberEntity member;
 
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
index 5d9ce6d..03db408 100644
--- a/src/main/resources/application.yml
+++ b/src/main/resources/application.yml
@@ -10,7 +10,7 @@ spring:
     database-platform: org.hibernate.dialect.H2Dialect
     defer-datasource-initialization: true
     hibernate:
-      ddl-auto: update
+      ddl-auto: create-drop
   sql:
     init:
       mode: always
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java
similarity index 63%
rename from src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
rename to src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java
index 7f936a4..1553aa7 100644
--- a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceAdminIntegrationTest.java
@@ -2,9 +2,10 @@ package com.github.floriangubler.coworkspacemgr;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntityReq;
 import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
@@ -21,29 +22,36 @@ import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.
 
 @SpringBootTest
 @AutoConfigureMockMvc
-public class CoworkspaceManagerIntegrationTest {
+public class CoworkspaceAdminIntegrationTest {
 
 	@Autowired
 	private MockMvc mockMvc;
 
 	@Autowired
-	private JwtServiceHMAC jwtService;
+	private static JwtServiceHMAC jwtService;
 
 	@Autowired
 	private ObjectMapper objectMapper;
 
+	private static String accesstoken;
+
+	@BeforeAll
+	public static void jwtauth(){
+		accesstoken = jwtService.createNewJWT(UUID.randomUUID().toString(), "9135f12e-1b66-4ee6-bbae-df37303cc154", "admin", List.of("ADMIN"));
+	}
+
+
 	@Test
-	public void allGamesShouldBeReturnedFromService() throws Exception {
-		val accessToken = jwtService.createNewJWT(UUID.randomUUID().toString(), "9135f12e-1b66-4ee6-bbae-df37303cc154", "admin", List.of("ADMIN"));
+	public void getbookings() throws Exception {
 
-		val response = mockMvc.perform(get("/api/booking").header("Authorization", "Bearer " + accessToken))
+		val response = mockMvc.perform(get("/api/bookings").header("Authorization", "Bearer " + accesstoken))
 				.andExpect(status().isOk())
 				.andDo(print())
 				.andReturn();
 
-		List<BookingEntity> games = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+		List<BookingEntityReq> bookings = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
 
-		assertEquals(3, games.size());
+		assertEquals(4, bookings.size());
 	}
 
 }
\ No newline at end of file
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java
new file mode 100644
index 0000000..b65866e
--- /dev/null
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceMemberIntegrationTest.java
@@ -0,0 +1,115 @@
+package com.github.floriangubler.coworkspacemgr;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntityReq;
+import com.github.floriangubler.coworkspacemgr.entity.BookingTime;
+import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
+import lombok.val;
+import org.junit.jupiter.api.*;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+
+import java.sql.Date;
+import java.time.Instant;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@SpringBootTest
+@AutoConfigureMockMvc
+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
+public class CoworkspaceMemberIntegrationTest {
+
+	@Autowired
+	private MockMvc mockMvc;
+
+	@Autowired
+	private ObjectMapper objectMapper;
+
+	private static String accesstoken;
+	private static UUID bookingid;
+
+	private static UUID userid = UUID.fromString("9135f11e-1b66-4ee6-bbae-df37303cc154");
+
+	@BeforeAll
+	public static void jwtauth(@Autowired JwtServiceHMAC jwtService){
+		accesstoken = jwtService.createNewJWT(UUID.randomUUID().toString(), userid.toString(), "user", new ArrayList<>());
+	}
+
+	@Test
+	@Order(1)
+	public void getbookings() throws Exception {
+
+		val response = mockMvc.perform(get("/api/bookings").header("Authorization", "Bearer " + accesstoken))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		List<BookingEntity> bookings = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+
+		assertEquals(4, bookings.size());
+	}
+
+	@Test
+	@Order(2)
+	public void getmybookings() throws Exception {
+
+		val response = mockMvc.perform(get("/api/bookings/?onlymy=true").header("Authorization", "Bearer " + accesstoken))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		List<BookingEntity> bookings = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+
+		assertEquals(1, bookings.size());
+	}
+
+	@Test
+	@Order(3)
+	public void createbooking() throws Exception {
+		BookingEntityReq bookingreq = new BookingEntityReq();
+		bookingreq.setMemberId(userid);
+		bookingreq.setDate(Date.from(Instant.now()));
+		bookingreq.setTime(BookingTime.AFTERNOON);
+		val response = mockMvc.perform(post("/api/bookings").header("Authorization", "Bearer " + accesstoken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(bookingreq)))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		BookingEntity booking = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+		bookingid = booking.getId();
+
+		assertNull(booking.getMember()); //Anonymisiation
+		assertEquals(booking.getTime(), BookingTime.AFTERNOON);
+	}
+
+	@Test
+	@Order(4)
+	public void deletebooking() throws Exception {
+		mockMvc.perform(delete("/api/bookings/" + bookingid.toString()).header("Authorization", "Bearer " + accesstoken))
+				.andExpect(status().isNoContent())
+				.andDo(print())
+				.andReturn();
+	}
+
+	@Test
+	@Order(5)
+	public void deletebookingerror() throws Exception {
+		mockMvc.perform(delete("/api/bookings/" + "b8160463-01a0-4c7a-bd46-5b2716dbe4c1").header("Authorization", "Bearer " + accesstoken))
+				.andExpect(status().isNotFound())
+				.andDo(print())
+				.andReturn();
+	}
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java
new file mode 100644
index 0000000..a70cc01
--- /dev/null
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceUserIntegrationTest.java
@@ -0,0 +1,74 @@
+package com.github.floriangubler.coworkspacemgr;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.floriangubler.coworkspacemgr.entity.MemberDTO;
+import com.github.floriangubler.coworkspacemgr.entity.TokenResponse;
+import org.junit.jupiter.api.*;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@SpringBootTest
+@AutoConfigureMockMvc
+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
+public class CoworkspaceUserIntegrationTest {
+
+	@Autowired
+	private MockMvc mockMvc;
+
+	@Autowired
+	private ObjectMapper objectMapper;
+
+	private static String EMAIL = "test@xyz.ch";
+	private static String PW = "test123";
+
+	private static String REFRESHTOKEN;
+
+	@Test
+	@Order(1)
+	public void register() throws Exception {
+		MemberDTO memberDTO = new MemberDTO();
+		memberDTO.setEmail(EMAIL);
+		memberDTO.setPassword(PW);
+		memberDTO.setFirstname("test");
+		memberDTO.setLastname("test");
+		var response = mockMvc.perform(post("/api/auth/register").contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(memberDTO)))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		TokenResponse tokenres = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+		REFRESHTOKEN = tokenres.getRefreshToken();
+	}
+
+	@Test
+	@Order(2)
+	public void gettokenByUserPw() throws Exception {
+
+		mockMvc.perform(post("/api/auth/token?grant_type=password&email="+ EMAIL + "&password="+ PW))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+	}
+
+	@Test
+	@Order(3)
+	public void gettokenByRefreshToken() throws Exception {
+
+		mockMvc.perform(post("/api/auth/token?grant_type=refresh_token&refresh_token="+ REFRESHTOKEN))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+	}
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntityReq.java b/src/test/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntityReq.java
new file mode 100644
index 0000000..097a2ef
--- /dev/null
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntityReq.java
@@ -0,0 +1,25 @@
+package com.github.floriangubler.coworkspacemgr.entity;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.Setter;
+import lombok.ToString;
+
+import java.io.Serializable;
+import java.util.Date;
+import java.util.UUID;
+
+@Getter
+@Setter
+@ToString
+@RequiredArgsConstructor
+public class BookingEntityReq implements Serializable {
+
+    private UUID memberId;
+
+    private Date date;
+
+    private BookingTime time;
+
+    private BookingStatus status;
+}

commit ff6e38eb6242a662854574f29868191df91046dc
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 13:45:39 2022 +0200

    Updating Readme and Fixing

diff --git a/.gitignore b/.gitignore
index 9a8226c..a2f1287 100644
--- a/.gitignore
+++ b/.gitignore
@@ -77,4 +77,8 @@ fabric.properties
 .idea/httpRequests
 
 # Android studio 3.1+ serialized cache file
-.idea/caches/build_file_checksums.ser
\ No newline at end of file
+.idea/caches/build_file_checksums.ser
+
+# DB Files
+database.h2.mv.db
+database.h2.trace.db
\ No newline at end of file
diff --git a/README.md b/README.md
index f430db6..8a2cd23 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,20 @@
-# spring-boot-crud-example
+# M223 Coworkingspace Manager
 
-API documentation: http://localhost:8080/swagger-ui/index.html
\ No newline at end of file
+API documentation: http://localhost:8080/swagger-ui/index.html  
+H2 Console: http://localhost:8080/h2-console/  
+GitHub Repo: https://github.com/FlorianGubler/m223
+
+<h3>Wichtige Pfäde:</h3>  
+- docs/ (Planung & Diagramme)
+- http-requests/ (Requests - Keys müssen jede 24h erneuert werden in Env File) 
+- src/main/java/ressources/data.sql (Testdaten SQL - Wird beim Start automatisch ausgeführt)
+- Tests unter src/test/java/
+
+<h3>Anleitung Applikationsstart</h3>
+1. Projekt als Maven Project importieren & Dependencys laden
+2. Main Klasse starten: /src/main/java/com.github.floriangubler.coworkspacemgr.CoworkspaceManagerApplication
+
+<h3>Infos</h3>
+- Die bereits existierenden Benutzer (z.B. Admin) sind im data.sql File mit den Passwörtern zu finden.
+- Rest-Endpoints sind in der Planung unter docs/3_Schnittstellenplanung.docx zu finden
+- Die Datenbank ist im File database.h2.mv.db / database.h2.trac.db persistent gespeichert. (Werden beim Start automatisch erstellt)
diff --git a/database.h2.mv.db b/database.h2.mv.db
deleted file mode 100644
index 32f91ad..0000000
Binary files a/database.h2.mv.db and /dev/null differ
diff --git a/database.h2.trace.db b/database.h2.trace.db
deleted file mode 100644
index c94d966..0000000
--- a/database.h2.trace.db
+++ /dev/null
@@ -1,156 +0,0 @@
-2022-09-20 13:39:12 database: wrong user or password; user: "SA"
-org.h2.message.DbException: Falscher Benutzername oder Passwort
-Wrong user name or password [28000-214]
-	at org.h2.message.DbException.get(DbException.java:223)
-	at org.h2.message.DbException.get(DbException.java:199)
-	at org.h2.message.DbException.get(DbException.java:188)
-	at org.h2.engine.Engine.openSession(Engine.java:154)
-	at org.h2.engine.Engine.openSession(Engine.java:222)
-	at org.h2.engine.Engine.createSession(Engine.java:201)
-	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
-	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
-	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:288)
-	at org.h2.server.web.WebServer.getConnection(WebServer.java:808)
-	at org.h2.server.web.WebApp.login(WebApp.java:1033)
-	at org.h2.server.web.WebApp.process(WebApp.java:226)
-	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
-	at org.h2.server.web.WebServlet.doGet(WebServlet.java:129)
-	at org.h2.server.web.WebServlet.doPost(WebServlet.java:166)
-	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
-	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
-	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
-	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
-	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
-	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
-	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
-	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
-	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
-	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
-	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:65)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
-	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
-	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
-	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
-	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
-	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
-	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
-	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
-	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
-	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
-	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
-	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
-	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
-	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
-	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
-	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
-	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
-	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
-	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
-	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
-	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
-	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
-	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
-	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
-	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
-	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
-	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
-	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1789)
-	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
-	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
-	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
-	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
-	at java.base/java.lang.Thread.run(Thread.java:833)
-Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Falscher Benutzername oder Passwort
-Wrong user name or password [28000-214]
-	at org.h2.message.DbException.getJdbcSQLException(DbException.java:510)
-	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
-	... 91 more
-2022-09-21 10:15:12 jdbc[3]: exception
-org.h2.jdbc.JdbcSQLSyntaxErrorException: Feld "PASSWORD_HASH" nicht gefunden
-Column "PASSWORD_HASH" not found; SQL statement:
-INSERT INTO MEMBER (id, email, firstname, lastname, password_hash, is_admin) VALUES ('9135f12e-1b66-4ee6-bbae-df37303cc154', 'admin@test.ch', 'Admin', 'User', '$2a$10$aDD6I9Ej5.W8busvlsdPx.JvMWyJX8cOeOfVb.3q73KH2swww/N9C', true) [42122-214]
-	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
-	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
-	at org.h2.message.DbException.get(DbException.java:223)
-	at org.h2.message.DbException.get(DbException.java:199)
-	at org.h2.table.Table.getColumn(Table.java:749)
-	at org.h2.command.Parser.parseColumn(Parser.java:1256)
-	at org.h2.command.Parser.parseColumnList(Parser.java:1241)
-	at org.h2.command.Parser.parseInsert(Parser.java:1641)
-	at org.h2.command.Parser.parsePrepared(Parser.java:814)
-	at org.h2.command.Parser.parse(Parser.java:689)
-	at org.h2.command.Parser.parse(Parser.java:661)
-	at org.h2.command.Parser.prepareCommand(Parser.java:569)
-	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
-	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
-	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
-	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
-	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
-	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
-	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
-	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
-	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
-	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
-	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
-	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
-	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
-	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
-	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
-	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
-	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
-	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
-	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
-	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
-	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
-	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
-	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
-	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
-	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
-	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
-	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
-	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
-	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
-	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
-	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
-	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
-	at com.github.floriangubler.coworkspacemgr.CoworkspaceManagerApplication.main(CoworkspaceManagerApplication.java:10)
-	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
-	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
-	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
-	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
-	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
index efb5b64..f392153 100644
--- a/http-requests/client-requests.rest
+++ b/http-requests/client-requests.rest
@@ -45,13 +45,13 @@ Authorization: Bearer {{jwt}}
 
 // Bookings
 //Get all bookings
-GET http://localhost:8080/api/bookings/
+GET http://localhost:8080/api/bookings
 Authorization: Bearer {{jwt}}
 
 ###
 
 //Get user bookings
-GET http://localhost:8080/api/bookings/true
+GET http://localhost:8080/api/bookings/?onlymy=true
 Authorization: Bearer {{jwt}}
 
 ###
@@ -62,14 +62,7 @@ Authorization: Bearer {{jwt}}
 Content-Type: application/json
 
 {
-  "member": {
-    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
-    "email": "string",
-    "firstname": "string",
-    "lastname": "string",
-    "password": "string",
-    "isAdmin": true
-  },
+  "memberId": "9135f12e-1b66-4ee6-bbae-df37303cc154",
   "date": "2022-09-21T06:31:54.404Z",
   "time": "MORNING",
   "status": "ORDERED"
@@ -83,6 +76,7 @@ Authorization: Bearer {{jwt}}
 Content-Type: application/json
 
 {
+  "memberId": "9135f12e-1b66-4ee6-bbae-df37303cc154",
   "date": "2022-09-21",
   "time": "MORNING",
   "status": "ORDERED"
diff --git a/http-requests/http-client.env.json b/http-requests/http-client.env.json
index fd86ba6..94e884f 100644
--- a/http-requests/http-client.env.json
+++ b/http-requests/http-client.env.json
@@ -3,7 +3,7 @@
     "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0Iiwic2NvcGUiOlsiQURNSU4iXSwibmFtZSI6ImFkbWluQHRlc3QuY2giLCJ0eXAiOiJCZWFyZXIiLCJleHAiOjE2NjM3NjI0NTEsImlhdCI6MTY2MzY3NjA1MSwianRpIjoiOTNkMjlhMjItYWNlZS00M2ZmLWIwMzEtZWI1MmI5Nzg3ODQxIn0.B7usabZ7oh_Jh2yxjljn9-AIP3ZQbsWn3ugz_SAZiQlcJIa2ehDUP4CNzBw6zUvqbCM_rZfDJMh7zgP7TdaSLQ"
   },
   "member": {
-    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0IiwiaWF0IjoxNjYzMTQ4Njc0LCJleHAiOjE2NjMzNDg2NzQsImlzcyI6Imh0dHBzOi8vYXBpLmFsZWV2YS5pby9hdXRoIiwidHlwIjoiQmVhcmVyIn0.WFs8NcPeqdLf89unjx1cqPa5U0XYN6ecrDt6X2l1tCsdWNtUDxG5T6TeMMvumbqwZ9C0Z_djhYGdyHBzeKzCbg"
+    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMWUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0Iiwic2NvcGUiOltdLCJuYW1lIjoidXNlckB0ZXN0LmNoIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNjYzODM4ODk4LCJpYXQiOjE2NjM3NTI0OTgsImp0aSI6IjJlZTUzNDIzLTk1NDgtNDBjZS04Y2Q0LTUyOTFhZTZkNTgyZSJ9.lFqN3LH-CZJcun9qyoLg0l8LlDTBJIJe9Mb35u73Dlf_iMHFC67l3q-DEBvGE0v2-YE_VLcrEwfE8QpSEDlM-w"
   },
   "user": {
     "jwt": ""
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 615f063..195119d 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -40,10 +40,10 @@ public class BookingController {
             description = "Get all bookings (for users anonymised) or only bookings of logged-in User",
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
-    @GetMapping("/{onlymy}")
+    @GetMapping
     List<BookingEntity> loadUserBookings(
             @Parameter(description = "Onlymy", required = false)
-            @PathVariable(name = "onlymy", required = false)
+            @RequestParam(name = "onlymy", required = false)
             Boolean onlymy,
             Authentication authentication) {
         UUID userid = UUID.fromString(authentication.getName());
@@ -92,7 +92,11 @@ public class BookingController {
         } else{
             booking.setStatus(BookingStatus.ORDERED);
         }
-        return bookingService.create(booking);
+        BookingEntity response = bookingService.create(booking);
+        if(!UUID.fromString(authentication.getName()).equals(response.getMember().getId()) || !getRolesSet(authentication).contains("ROLE_ADMIN")){
+            response.setMember(null);
+        }
+        return response;
     }
 
     @Operation(
@@ -110,6 +114,7 @@ public class BookingController {
             @PathVariable(name="bookingid", required = true)
             UUID bookingid,
             Authentication authentication) {
+        booking.setMember(memberService.getMember(booking.getMemberId()));
         try{
             return new ResponseEntity<>(bookingService.update(booking, bookingid), HttpStatus.OK);
         } catch(BookingNotFoundException e){
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
index d496c04..a0963a1 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
@@ -2,7 +2,9 @@ package com.github.floriangubler.coworkspacemgr.repository;
 
 import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
 import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 
 import java.util.List;
 import java.util.UUID;
@@ -11,5 +13,9 @@ public interface BookingRepository extends JpaRepository<BookingEntity, UUID> {
     List<BookingEntity> findAll();
 
     @Query("SELECT b from BOOKING b where b.member.id = :memberId")
-    List<BookingEntity> findAllByMemberId(UUID memberId);
+    List<BookingEntity> findAllByMemberId(@Param("memberId") UUID memberId);
+
+    @Modifying
+    @Query("DELETE FROM BOOKING b where b.member.id = :memberId")
+    void deleteAllByMemberId(@Param("memberId") UUID memberId);
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
index 1593868..7089f9b 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
@@ -1,13 +1,13 @@
 package com.github.floriangubler.coworkspacemgr.repository;
 
 import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
-import org.springframework.data.repository.CrudRepository;
+import org.springframework.data.jpa.repository.JpaRepository;
 
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
 
-public interface MemberRepository extends CrudRepository<MemberEntity, UUID> {
+public interface MemberRepository extends JpaRepository<MemberEntity, UUID> {
     List<MemberEntity> findAll();
 
     Optional<MemberEntity> findByEmail(String email);
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
index 9b5a814..d0d8cf8 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
@@ -3,9 +3,11 @@ package com.github.floriangubler.coworkspacemgr.service;
 import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
 import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.repository.BookingRepository;
 import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
 import java.util.Optional;
@@ -17,8 +19,11 @@ public class MemberService {
 
     private final MemberRepository repository;
 
-    MemberService(MemberRepository repository) {
+    private final BookingRepository bookingRepository;
+
+    MemberService(MemberRepository repository, BookingRepository bookingRepository) {
         this.repository = repository;
+        this.bookingRepository = bookingRepository;
     }
 
     public List<MemberEntity> getMembers(){
@@ -59,8 +64,10 @@ public class MemberService {
         }
     }
 
+    @Transactional
     public void delete(UUID memberid){
         if(repository.findById(memberid).isPresent()){
+            bookingRepository.deleteAllByMemberId(memberid);
             log.info("Executing delete user with id " + memberid + " ...");
             repository.deleteById(memberid);
         } else{
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
index 03db408..5d9ce6d 100644
--- a/src/main/resources/application.yml
+++ b/src/main/resources/application.yml
@@ -10,7 +10,7 @@ spring:
     database-platform: org.hibernate.dialect.H2Dialect
     defer-datasource-initialization: true
     hibernate:
-      ddl-auto: create-drop
+      ddl-auto: update
   sql:
     init:
       mode: always
diff --git a/src/main/resources/data.sql b/src/main/resources/data.sql
index f13f119..497998f 100644
--- a/src/main/resources/data.sql
+++ b/src/main/resources/data.sql
@@ -5,5 +5,6 @@ VALUES ('9135f11e-1b66-4ee6-bbae-df37303cc154', 'user@test.ch', 'User', 'Account
 
 INSERT INTO BOOKING (id, member, date, time, status)
 VALUES ('413e2297-b84b-42ef-97ed-16a8a9d1d671', '9135f12e-1b66-4ee6-bbae-df37303cc154', '2022-09-22', 'MORNING', 'APPROVED'),
-       ('b8160463-01a0-4c7a-bd46-5b3716dbe4c6', '9135f12e-1b66-4ee6-bbae-df37303cc154', '2022-09-25', 'DAY', 'DECLINED'),
+       ('b8160463-01a0-4c7a-bd46-5b3716dbe4c6', '9135f12e-1b66-4ee6-bbae-df37303cc154', '2022-09-25', 'DAY', 'ORDERED'),
+       ('b8160463-01a0-4c7a-bd46-5b2716dbe4c6', '9135f12e-1b66-4ee6-bbae-df37303cc154', '2022-09-25', 'DAY', 'DECLINED'),
        ('3c13c533-fbac-4881-b94d-f95cb2ef16c8', '9135f11e-1b66-4ee6-bbae-df37303cc154', '2022-10-08', 'DAY', 'ORDERED');
\ No newline at end of file

commit 7fbcb057e6a1819e70f04d5f92736fc60c8a7293
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 11:00:59 2022 +0200

    Update Request DTOs

diff --git a/database.h2.mv.db b/database.h2.mv.db
index 118fc8b..32f91ad 100644
Binary files a/database.h2.mv.db and b/database.h2.mv.db differ
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
index 592ccc5..efb5b64 100644
--- a/http-requests/client-requests.rest
+++ b/http-requests/client-requests.rest
@@ -31,7 +31,8 @@ Content-Type: application/json
 {
   "email": "test123@test.ch",
   "firstname": "Test",
-  "lastname": "Test"
+  "lastname": "Test",
+  "password": "password1234"
 }
 
 ###
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index 79ddcf7..097704b 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -1,6 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
-import com.github.floriangubler.coworkspacemgr.entity.RegisterDTO;
+import com.github.floriangubler.coworkspacemgr.entity.MemberDTO;
 import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import io.swagger.v3.oas.annotations.Operation;
@@ -121,7 +121,7 @@ public class AuthController {
     public ResponseEntity<TokenResponse> register(
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Member", required = true)
             @RequestBody(required = true)
-            RegisterDTO registerdto
+            MemberDTO registerdto
     ) throws GeneralSecurityException, IOException {
         String passwordHash = BCrypt.hashpw(registerdto.getPassword(), BCrypt.gensalt());
         try{
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
index 855623c..26b69d9 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
@@ -1,6 +1,7 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
 import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.entity.MemberDTO;
 import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
@@ -11,14 +12,11 @@ import io.swagger.v3.oas.annotations.tags.Tag;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.crypto.bcrypt.BCrypt;
 import org.springframework.web.bind.annotation.*;
 
 import java.util.List;
-import java.util.Set;
 import java.util.UUID;
-import java.util.stream.Collectors;
 
 @RestController
 @RequestMapping("/api/members")
@@ -52,12 +50,13 @@ public class MemberController {
     ResponseEntity<Void> updatemember (
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Member Update", required = true)
             @RequestBody(required = true)
-            MemberEntity member,
+            MemberDTO memberDTO,
             @Parameter(description = "MemberID", required = true)
             @PathVariable(name="memberid", required = true)
             UUID memberid) {
         try{
-            memberService.update(member, memberid);
+            String passwordHash = BCrypt.hashpw(memberDTO.getPassword(), BCrypt.gensalt());
+            memberService.update(new MemberEntity(UUID.randomUUID(), memberDTO.getEmail(), memberDTO.getFirstname(), memberDTO.getLastname(), passwordHash, false), memberid);
         } catch(UserNotFoundException e){
             return new ResponseEntity<>(HttpStatus.NOT_FOUND);
         } catch (UserAlreadyExistsException e){
@@ -75,7 +74,7 @@ public class MemberController {
     @PreAuthorize("hasRole('ADMIN')")
     ResponseEntity<Void> deletemember(
             @Parameter(description = "MemberID", required = true)
-            @RequestParam(name = "memberid", required = true)
+            @PathVariable(name = "memberid", required = true)
             UUID memberid) {
             try{
                 memberService.delete(memberid);
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberDTO.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberDTO.java
new file mode 100644
index 0000000..6843359
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberDTO.java
@@ -0,0 +1,27 @@
+package com.github.floriangubler.coworkspacemgr.entity;
+
+import lombok.*;
+
+import javax.validation.constraints.NotNull;
+
+@Getter
+@Setter
+@ToString
+@RequiredArgsConstructor
+@AllArgsConstructor
+public class MemberDTO {
+
+    @NotNull
+    String email;
+
+    @NotNull
+    String firstname;
+
+    @NotNull
+    String lastname;
+
+    @NotNull
+    String password;
+
+    Boolean isAdmin;
+}
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/RegisterDTO.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/RegisterDTO.java
deleted file mode 100644
index 087e2a6..0000000
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/RegisterDTO.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.github.floriangubler.coworkspacemgr.entity;
-
-import lombok.*;
-import org.hibernate.Hibernate;
-import org.hibernate.annotations.GenericGenerator;
-import org.hibernate.annotations.Type;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
-import javax.validation.constraints.NotNull;
-import java.io.Serializable;
-import java.util.Objects;
-import java.util.UUID;
-
-@Getter
-@Setter
-@ToString
-@RequiredArgsConstructor
-@AllArgsConstructor
-public class RegisterDTO {
-
-    @NotNull
-    String email;
-
-    @NotNull
-    String firstname;
-
-    @NotNull
-    String lastname;
-
-    @NotNull
-    String password;
-}

commit 049d2db5bc5be9c4da82eb687e4c55b6edcb0148
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 10:53:54 2022 +0200

    Update Nullable Params

diff --git a/database.h2.mv.db b/database.h2.mv.db
index e785dab..118fc8b 100644
Binary files a/database.h2.mv.db and b/database.h2.mv.db differ
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
index 9f96ebe..592ccc5 100644
--- a/http-requests/client-requests.rest
+++ b/http-requests/client-requests.rest
@@ -12,6 +12,11 @@ Content-Type: application/json
 
 ###
 
+//Get Token from Member
+POST http://localhost:8080/api/auth/token?grant_type=password&email=admin%40test.ch&password=password1234
+
+###
+
 //Get members
 GET http://localhost:8080/api/members
 Authorization: Bearer {{jwt}}
@@ -24,6 +29,8 @@ Authorization: Bearer {{jwt}}
 Content-Type: application/json
 
 {
+  "email": "test123@test.ch",
+  "firstname": "Test",
   "lastname": "Test"
 }
 
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index 1033c3c..79ddcf7 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -1,5 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
+import com.github.floriangubler.coworkspacemgr.entity.RegisterDTO;
 import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import io.swagger.v3.oas.annotations.Operation;
@@ -67,7 +68,7 @@ public class AuthController {
                     throw new IllegalArgumentException("Username or password wrong");
                 }
 
-                if (!BCrypt.checkpw(password, optionalMember.get().getPassword())) {
+                if (!BCrypt.checkpw(password, optionalMember.get().getPasswordHash())) {
                     throw new IllegalArgumentException("Username or password wrong");
                 }
 
@@ -120,15 +121,14 @@ public class AuthController {
     public ResponseEntity<TokenResponse> register(
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Member", required = true)
             @RequestBody(required = true)
-            MemberEntity member
+            RegisterDTO registerdto
     ) throws GeneralSecurityException, IOException {
-        //member.getPassword() isn't hashed yet
-        String passwordHash = BCrypt.hashpw(member.getPassword(), BCrypt.gensalt());
+        String passwordHash = BCrypt.hashpw(registerdto.getPassword(), BCrypt.gensalt());
         try{
-            memberService.create(new MemberEntity(UUID.randomUUID(), member.getEmail(), member.getFirstname(), member.getLastname(), passwordHash, false));
+            memberService.create(new MemberEntity(UUID.randomUUID(), registerdto.getEmail(), registerdto.getFirstname(), registerdto.getLastname(), passwordHash, false));
         } catch(UserAlreadyExistsException e){
             return new ResponseEntity<>(HttpStatus.CONFLICT);
         }
-        return new ResponseEntity<>(getToken("password", "", member.getEmail(), member.getPassword()), HttpStatus.OK);
+        return new ResponseEntity<>(getToken("password", "", registerdto.getEmail(), registerdto.getPassword()), HttpStatus.OK);
     }
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 11dece7..615f063 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -29,7 +29,6 @@ public class BookingController {
 
     private final BookingService bookingService;
     private final MemberService memberService;
-    private final static String ADMINROLE = "ROLE_ADMIN";
 
     BookingController(BookingService bookingService, MemberService memberService) {
         this.bookingService = bookingService;
@@ -44,7 +43,7 @@ public class BookingController {
     @GetMapping("/{onlymy}")
     List<BookingEntity> loadUserBookings(
             @Parameter(description = "Onlymy", required = false)
-            @RequestParam(name = "onlymy", required = false)
+            @PathVariable(name = "onlymy", required = false)
             Boolean onlymy,
             Authentication authentication) {
         UUID userid = UUID.fromString(authentication.getName());
@@ -52,7 +51,7 @@ public class BookingController {
         if(onlymy != null && onlymy){
             return bookingService.findUserBookings(userid);
         } else{
-            return bookingService.findBookings(!userroles.contains(ADMINROLE), userid);
+            return bookingService.findBookings(!userroles.contains("ROLE_ADMIN"), userid);
         }
     }
 
@@ -64,7 +63,7 @@ public class BookingController {
     @DeleteMapping("/{bookingid}")
     ResponseEntity<Void> deletebooking(
             @Parameter(description = "BookingID", required = true)
-            @RequestParam(name = "bookingid", required = true)
+            @PathVariable(name = "bookingid", required = true)
             UUID bookingid,
             Authentication authentication) {try{
             bookingService.delete(bookingid, authentication);
@@ -81,14 +80,14 @@ public class BookingController {
             description = "Create a new Booking (for users with status OPENED, for Admins status ACCEPTED)",
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
-    @PostMapping("/")
+    @PostMapping
     BookingEntity createbooking(
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Booking", required = true)
             @RequestBody(required = true)
             BookingEntity booking,
             Authentication authentication) {
         booking.setMember(memberService.getMember(booking.getMemberId()));
-        if(getRolesSet(authentication).contains(ADMINROLE)){
+        if(getRolesSet(authentication).contains("ROLE_ADMIN")){
             booking.setStatus(BookingStatus.APPROVED);
         } else{
             booking.setStatus(BookingStatus.ORDERED);
@@ -102,13 +101,13 @@ public class BookingController {
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
     @PutMapping("/{bookingid}")
-    @PreAuthorize("hasRole(ADMINROLE)")
+    @PreAuthorize("hasRole('ADMIN')")
     ResponseEntity<BookingEntity> updatebooking(
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Booking Update", required = true)
             @RequestBody(required = true)
             BookingEntity booking,
             @Parameter(description = "BookingID", required = true)
-            @RequestParam(name="bookingid", required = true)
+            @PathVariable(name="bookingid", required = true)
             UUID bookingid,
             Authentication authentication) {
         try{
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
index d1d5d57..855623c 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
@@ -1,6 +1,7 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
 import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
 import io.swagger.v3.oas.annotations.Operation;
@@ -25,7 +26,6 @@ import java.util.stream.Collectors;
 public class MemberController {
 
     private final MemberService memberService;
-    private final static String ADMINROLE = "ROLE_ADMIN";
 
     MemberController(MemberService memberService) {
         this.memberService = memberService;
@@ -36,8 +36,8 @@ public class MemberController {
             description = "Get all Members (Only Admin)",
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
-    @GetMapping("/")
-    @PreAuthorize("hasRole(ADMINROLE)")
+    @GetMapping
+    @PreAuthorize("hasRole('ADMIN')")
     List<MemberEntity> loadUserBookings() {
         return memberService.getMembers();
     }
@@ -48,18 +48,20 @@ public class MemberController {
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
     @PutMapping("/{memberid}")
-    @PreAuthorize("hasRole(ADMINROLE)")
+    @PreAuthorize("hasRole('ADMIN')")
     ResponseEntity<Void> updatemember (
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Member Update", required = true)
             @RequestBody(required = true)
             MemberEntity member,
             @Parameter(description = "MemberID", required = true)
-            @RequestParam(name="memberid", required = true)
+            @PathVariable(name="memberid", required = true)
             UUID memberid) {
         try{
             memberService.update(member, memberid);
         } catch(UserNotFoundException e){
             return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+        } catch (UserAlreadyExistsException e){
+            return new ResponseEntity<>(HttpStatus.CONFLICT);
         }
         return new ResponseEntity<>(HttpStatus.NO_CONTENT);
     }
@@ -69,8 +71,8 @@ public class MemberController {
             description = "Delete a Member (Only Admin)",
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
-    @DeleteMapping("/")
-    @PreAuthorize("hasRole(ADMINROLE)")
+    @DeleteMapping("/{memberid}")
+    @PreAuthorize("hasRole('ADMIN')")
     ResponseEntity<Void> deletemember(
             @Parameter(description = "MemberID", required = true)
             @RequestParam(name = "memberid", required = true)
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
index 046aee3..e8ee122 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
@@ -7,6 +7,7 @@ import lombok.RequiredArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
 import org.hibernate.Hibernate;
+import org.hibernate.annotations.DynamicUpdate;
 import org.hibernate.annotations.GenericGenerator;
 import org.hibernate.annotations.Type;
 
@@ -21,6 +22,7 @@ import java.util.UUID;
 @ToString
 @RequiredArgsConstructor
 @Entity(name = "BOOKING")
+@DynamicUpdate
 public class BookingEntity implements Serializable {
 
     @Id
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
index e6bf5b6..0b0d83f 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
@@ -2,6 +2,7 @@ package com.github.floriangubler.coworkspacemgr.entity;
 
 import lombok.*;
 import org.hibernate.Hibernate;
+import org.hibernate.annotations.DynamicUpdate;
 import org.hibernate.annotations.GenericGenerator;
 import org.hibernate.annotations.Type;
 
@@ -20,6 +21,7 @@ import java.util.UUID;
 @RequiredArgsConstructor
 @AllArgsConstructor
 @Entity(name = "MEMBER")
+@DynamicUpdate
 public class MemberEntity implements Serializable {
 
     @Id
@@ -30,20 +32,16 @@ public class MemberEntity implements Serializable {
     UUID id = UUID.randomUUID();
 
     @Column(name = "email", nullable = false)
-    @NotNull
     String email;
 
     @Column(name = "firstname", nullable = false)
-    @NotNull
     String firstname;
 
     @Column(name = "lastname", nullable = false)
-    @NotNull
     String lastname;
 
     @Column(name = "password", nullable = false)
-    @NotNull
-    String password;
+    String passwordHash;
 
     @Column(name = "is_admin", nullable = false)
     Boolean isAdmin = false;
@@ -55,7 +53,7 @@ public class MemberEntity implements Serializable {
         MemberEntity that = (MemberEntity) o;
         return id != null && Objects.equals(id, that.id) &&
                 email != null && Objects.equals(email, that.email) &&
-                password != null && Objects.equals(password, that.password);
+                passwordHash != null && Objects.equals(passwordHash, that.passwordHash);
     }
 
     @Override
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/RegisterDTO.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/RegisterDTO.java
new file mode 100644
index 0000000..087e2a6
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/RegisterDTO.java
@@ -0,0 +1,35 @@
+package com.github.floriangubler.coworkspacemgr.entity;
+
+import lombok.*;
+import org.hibernate.Hibernate;
+import org.hibernate.annotations.GenericGenerator;
+import org.hibernate.annotations.Type;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.validation.constraints.NotNull;
+import java.io.Serializable;
+import java.util.Objects;
+import java.util.UUID;
+
+@Getter
+@Setter
+@ToString
+@RequiredArgsConstructor
+@AllArgsConstructor
+public class RegisterDTO {
+
+    @NotNull
+    String email;
+
+    @NotNull
+    String firstname;
+
+    @NotNull
+    String lastname;
+
+    @NotNull
+    String password;
+}
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
index e57664e..28b899d 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
@@ -20,7 +20,7 @@ import java.util.stream.Collectors;
 public class BookingService {
 
     private final BookingRepository repository;
-    private final String ADMINROLE = "ROLE_ADMIN";
+    private final String ADMINROLE = "ADMIN";
 
     BookingService(BookingRepository repository) {
         this.repository = repository;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
index bcca242..9b5a814 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
@@ -46,9 +46,14 @@ public class MemberService {
     }
     public MemberEntity update(MemberEntity member, UUID memberid){
         if(repository.findById(memberid).isPresent()){
-            log.info("Executing update user with id " + memberid + " ...");
-            member.setId(memberid);
-            return repository.save(member);
+            if(repository.findByEmail(member.getEmail()).isEmpty()){
+                log.info("Executing update user with id " + memberid + " ...");
+                member.setId(memberid);
+                return repository.save(member);
+            } else{
+                throw new UserAlreadyExistsException("Member with email '" + member.getEmail() + "' already exists");
+            }
+
         } else{
             throw new UserNotFoundException("Member with given id not found");
         }

commit 8817c791a1832a96bba1d8c734ea749d11487f27
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 10:17:06 2022 +0200

    Update Member Entity Password

diff --git a/database.h2.mv.db b/database.h2.mv.db
index ff6c8db..e785dab 100644
Binary files a/database.h2.mv.db and b/database.h2.mv.db differ
diff --git a/database.h2.trace.db b/database.h2.trace.db
index c30df42..c94d966 100644
--- a/database.h2.trace.db
+++ b/database.h2.trace.db
@@ -97,3 +97,60 @@ Wrong user name or password [28000-214]
 	at org.h2.message.DbException.getJdbcSQLException(DbException.java:510)
 	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
 	... 91 more
+2022-09-21 10:15:12 jdbc[3]: exception
+org.h2.jdbc.JdbcSQLSyntaxErrorException: Feld "PASSWORD_HASH" nicht gefunden
+Column "PASSWORD_HASH" not found; SQL statement:
+INSERT INTO MEMBER (id, email, firstname, lastname, password_hash, is_admin) VALUES ('9135f12e-1b66-4ee6-bbae-df37303cc154', 'admin@test.ch', 'Admin', 'User', '$2a$10$aDD6I9Ej5.W8busvlsdPx.JvMWyJX8cOeOfVb.3q73KH2swww/N9C', true) [42122-214]
+	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
+	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
+	at org.h2.message.DbException.get(DbException.java:223)
+	at org.h2.message.DbException.get(DbException.java:199)
+	at org.h2.table.Table.getColumn(Table.java:749)
+	at org.h2.command.Parser.parseColumn(Parser.java:1256)
+	at org.h2.command.Parser.parseColumnList(Parser.java:1241)
+	at org.h2.command.Parser.parseInsert(Parser.java:1641)
+	at org.h2.command.Parser.parsePrepared(Parser.java:814)
+	at org.h2.command.Parser.parse(Parser.java:689)
+	at org.h2.command.Parser.parse(Parser.java:661)
+	at org.h2.command.Parser.prepareCommand(Parser.java:569)
+	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
+	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
+	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
+	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
+	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
+	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
+	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
+	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
+	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
+	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
+	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
+	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
+	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
+	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
+	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
+	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
+	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
+	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
+	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
+	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955)
+	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
+	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
+	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
+	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
+	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
+	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
+	at com.github.floriangubler.coworkspacemgr.CoworkspaceManagerApplication.main(CoworkspaceManagerApplication.java:10)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
+	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
index c85e5d2..9f96ebe 100644
--- a/http-requests/client-requests.rest
+++ b/http-requests/client-requests.rest
@@ -59,7 +59,7 @@ Content-Type: application/json
     "email": "string",
     "firstname": "string",
     "lastname": "string",
-    "passwordHash": "string",
+    "password": "string",
     "isAdmin": true
   },
   "date": "2022-09-21T06:31:54.404Z",
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index f0c9990..1033c3c 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -14,10 +14,7 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.crypto.bcrypt.BCrypt;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
 
 import java.io.IOException;
 import java.security.GeneralSecurityException;
@@ -70,7 +67,7 @@ public class AuthController {
                     throw new IllegalArgumentException("Username or password wrong");
                 }
 
-                if (!BCrypt.checkpw(password, optionalMember.get().getPasswordHash())) {
+                if (!BCrypt.checkpw(password, optionalMember.get().getPassword())) {
                     throw new IllegalArgumentException("Username or password wrong");
                 }
 
@@ -121,25 +118,17 @@ public class AuthController {
     )
     @PostMapping(value = "/register", produces = "application/json")
     public ResponseEntity<TokenResponse> register(
-            @Parameter(description = "Username / E-Mail", required = true)
-            @RequestParam(name = "email", required = true)
-            String email,
-            @Parameter(description = "Vorname", required = true)
-            @RequestParam(name = "firstname", required = true)
-            String firstname,
-            @Parameter(description = "Nachname", required = true)
-            @RequestParam(name = "lastname", required = true)
-            String lastname,
-            @Parameter(description = "Password", required = true)
-            @RequestParam(name = "password", required = true)
-            String password
+            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Member", required = true)
+            @RequestBody(required = true)
+            MemberEntity member
     ) throws GeneralSecurityException, IOException {
-        String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt());
+        //member.getPassword() isn't hashed yet
+        String passwordHash = BCrypt.hashpw(member.getPassword(), BCrypt.gensalt());
         try{
-            memberService.create(new MemberEntity(UUID.randomUUID(), email, firstname, lastname, passwordHash, false));
+            memberService.create(new MemberEntity(UUID.randomUUID(), member.getEmail(), member.getFirstname(), member.getLastname(), passwordHash, false));
         } catch(UserAlreadyExistsException e){
             return new ResponseEntity<>(HttpStatus.CONFLICT);
         }
-        return new ResponseEntity<>(getToken("password", "", email, password), HttpStatus.OK);
+        return new ResponseEntity<>(getToken("password", "", member.getEmail(), member.getPassword()), HttpStatus.OK);
     }
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
index eba8dec..e6bf5b6 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
@@ -9,6 +9,7 @@ import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.Id;
+import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 import java.util.UUID;
@@ -29,16 +30,20 @@ public class MemberEntity implements Serializable {
     UUID id = UUID.randomUUID();
 
     @Column(name = "email", nullable = false)
+    @NotNull
     String email;
 
     @Column(name = "firstname", nullable = false)
+    @NotNull
     String firstname;
 
     @Column(name = "lastname", nullable = false)
+    @NotNull
     String lastname;
 
-    @Column(name = "password_hash", nullable = false)
-    String passwordHash;
+    @Column(name = "password", nullable = false)
+    @NotNull
+    String password;
 
     @Column(name = "is_admin", nullable = false)
     Boolean isAdmin = false;
@@ -50,7 +55,7 @@ public class MemberEntity implements Serializable {
         MemberEntity that = (MemberEntity) o;
         return id != null && Objects.equals(id, that.id) &&
                 email != null && Objects.equals(email, that.email) &&
-                passwordHash != null && Objects.equals(passwordHash, that.passwordHash);
+                password != null && Objects.equals(password, that.password);
     }
 
     @Override
diff --git a/src/main/resources/data.sql b/src/main/resources/data.sql
index f5c38b2..f13f119 100644
--- a/src/main/resources/data.sql
+++ b/src/main/resources/data.sql
@@ -1,6 +1,6 @@
-INSERT INTO MEMBER (id, email, firstname, lastname, password_hash, is_admin)
+INSERT INTO MEMBER (id, email, firstname, lastname, password, is_admin)
 VALUES ('9135f12e-1b66-4ee6-bbae-df37303cc154', 'admin@test.ch', 'Admin', 'User', '$2a$10$aDD6I9Ej5.W8busvlsdPx.JvMWyJX8cOeOfVb.3q73KH2swww/N9C', true); -- Password: password1234
-INSERT INTO MEMBER (id, email, firstname, lastname, password_hash, is_admin)
+INSERT INTO MEMBER (id, email, firstname, lastname, password, is_admin)
 VALUES ('9135f11e-1b66-4ee6-bbae-df37303cc154', 'user@test.ch', 'User', 'Account', '$2a$10$aDD6I9Ej5.W8busvlsdPx.JvMWyJX8cOeOfVb.3q73KH2swww/N9C', false); -- Password: password1234
 
 INSERT INTO BOOKING (id, member, date, time, status)

commit d34c3d92582eb720aeefb6a53555fe2fc10c0e85
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 09:36:22 2022 +0200

    Auth Path Change

diff --git a/database.h2.mv.db b/database.h2.mv.db
index 3525549..ff6c8db 100644
Binary files a/database.h2.mv.db and b/database.h2.mv.db differ
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
index 95c3789..c85e5d2 100644
--- a/http-requests/client-requests.rest
+++ b/http-requests/client-requests.rest
@@ -1,3 +1,40 @@
+//Member
+//Create a member
+POST http://localhost:8080/api/auth/register
+Content-Type: application/json
+
+{
+  "email": "test@test.ch",
+  "firstname": "test",
+  "lastname": "test",
+  "password": "test123"
+}
+
+###
+
+//Get members
+GET http://localhost:8080/api/members
+Authorization: Bearer {{jwt}}
+
+###
+
+//Update a member
+PUT http://localhost:8080/api/members/9135f11e-1b66-4ee6-bbae-df37303cc154
+Authorization: Bearer {{jwt}}
+Content-Type: application/json
+
+{
+  "lastname": "Test"
+}
+
+###
+
+//Delete a member
+DELETE http://localhost:8080/api/members/9135f11e-1b66-4ee6-bbae-df37303cc154
+Authorization: Bearer {{jwt}}
+
+###
+
 // Bookings
 //Get all bookings
 GET http://localhost:8080/api/bookings/
@@ -49,42 +86,4 @@ Content-Type: application/json
 DELETE http://localhost:8080/api/bookings/413e2297-b84b-42ef-97ed-16a8a9d1d671
 Authorization: Bearer {{jwt}}
 
-###
-
-//Member
-//Get members
-GET http://localhost:8080/api/members
-Authorization: Bearer {{jwt}}
-
-###
-
-//Update a member
-POST http://localhost:8080/api/members/register
-Authorization: Bearer {{jwt}}
-Content-Type: application/json
-
-{
-  "email": "test@test.ch",
-  "firstname": "test",
-  "lastname": "test",
-  "password": "test123"
-}
-
-###
-
-//Update a member
-PUT http://localhost:8080/api/members/9135f11e-1b66-4ee6-bbae-df37303cc154
-Authorization: Bearer {{jwt}}
-Content-Type: application/json
-
-{
-  "lastname": "Test"
-}
-
-###
-
-//Delete a member
-DELETE http://localhost:8080/api/members/9135f11e-1b66-4ee6-bbae-df37303cc154
-Authorization: Bearer {{jwt}}
-
 ###
\ No newline at end of file
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java
index 57fa7a4..33b2fe6 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java
@@ -33,7 +33,7 @@ public class SecurityConfig {
     public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
         return http.csrf().disable()
                 .authorizeRequests()
-                .antMatchers("/auth/**", "/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**", "/h2-console/**", "/console/**").permitAll()
+                .antMatchers("/api/auth/**", "/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**", "/h2-console/**", "/console/**").permitAll()
                 .antMatchers(HttpMethod.OPTIONS).permitAll()
                 .anyRequest().authenticated()
                 .and()
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index bb8926c..f0c9990 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -27,7 +27,7 @@ import java.util.ArrayList;
 import java.util.UUID;
 
 @RestController
-@RequestMapping("/auth")
+@RequestMapping("/api/auth")
 public class AuthController {
 
     @Autowired

commit d27ec05f9b4dcffd1d80df0bf47f235efc8d2350
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 09:27:55 2022 +0200

    Update Sequence Diagram and Create Booking with Bookingid in JSON req

diff --git a/docs/charts/sequence_cancelbook.puml b/docs/charts/sequence_cancelbook.puml
index 4ca476e..56ab4df 100644
--- a/docs/charts/sequence_cancelbook.puml
+++ b/docs/charts/sequence_cancelbook.puml
@@ -5,9 +5,8 @@ alt JWT verified
     Server -> Datenbank: findbyId(bookingid)
     Datenbank --> Server: Return Booking
     alt Booking found
-        Server -> Server: Set Bookingstatus\n to CANCELED
-        Server -> Datenbank: Save Updated Booking
-        Datenbank --> Server: Update Sucessfull
+        Server -> Datenbank: Delete Booking
+        Datenbank --> Server: Delete Sucessfull
         Server --> Client: 200 OK
     else Booking not found
         Server --> Client: 404 NOT FOUND
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 329c4a5..11dece7 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -4,6 +4,7 @@ import com.github.floriangubler.coworkspacemgr.exception.BookingNotFoundExceptio
 import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.service.BookingService;
 import com.github.floriangubler.coworkspacemgr.entity.BookingStatus;
+import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
@@ -27,10 +28,12 @@ import java.util.stream.Collectors;
 public class BookingController {
 
     private final BookingService bookingService;
+    private final MemberService memberService;
     private final static String ADMINROLE = "ROLE_ADMIN";
 
-    BookingController(BookingService bookingService) {
+    BookingController(BookingService bookingService, MemberService memberService) {
         this.bookingService = bookingService;
+        this.memberService = memberService;
     }
 
     @Operation(
@@ -80,10 +83,11 @@ public class BookingController {
     )
     @PostMapping("/")
     BookingEntity createbooking(
-            @Parameter(description = "BookingID", required = true)
+            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Booking", required = true)
             @RequestBody(required = true)
             BookingEntity booking,
             Authentication authentication) {
+        booking.setMember(memberService.getMember(booking.getMemberId()));
         if(getRolesSet(authentication).contains(ADMINROLE)){
             booking.setStatus(BookingStatus.APPROVED);
         } else{
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
index 2ea02da..bcca242 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
@@ -8,6 +8,7 @@ import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
+import java.util.Optional;
 import java.util.UUID;
 
 @Service
@@ -25,6 +26,16 @@ public class MemberService {
         return repository.findAll();
     }
 
+    public MemberEntity getMember(UUID memberid){
+        log.info("Executing find member with id " + memberid + " ...");
+        Optional<MemberEntity> member = repository.findById(memberid);
+        if(member.isEmpty()){
+            throw new UserNotFoundException("User with id " + memberid + " not found...");
+        } else{
+            return member.get();
+        }
+    }
+
     public MemberEntity create(MemberEntity member){
         if(repository.findByEmail(member.getEmail()).isEmpty()){
             log.info("Executing update user with id " + member.getId() + " ...");

commit 37d8d83ae54d5bbfe7d3de4285ac8675be66e933
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 09:17:31 2022 +0200

    Update Endpoints with MemberService (Email Unique)

diff --git a/database.h2.mv.db b/database.h2.mv.db
index d302c0c..3525549 100644
Binary files a/database.h2.mv.db and b/database.h2.mv.db differ
diff --git a/docs/3_Schnittstellenplanung.docx b/docs/3_Schnittstellenplanung.docx
index 671636e..659eaeb 100644
--- a/docs/3_Schnittstellenplanung.docx
+++ b/docs/3_Schnittstellenplanung.docx
@@ -41,7 +41,7 @@ Storniert / löscht eine bestimmte Buchung. Mitglieder können nur eigene Buchun
 204  -  NO CONTENT
 Erfolgreich 
 401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token
+Ungültiger JWT-Token oder keine Berechtigung für 
 404  -  NOT FOUND
 Buchung nicht gefunden
 POST
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index 9b2d03e..bb8926c 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -1,5 +1,7 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
+import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
+import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
@@ -9,6 +11,8 @@ import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
 import org.springframework.security.crypto.bcrypt.BCrypt;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -32,6 +36,9 @@ public class AuthController {
     @Autowired
     private MemberRepository memberRepository;
 
+    @Autowired
+    MemberService memberService;
+
     @Operation(
             summary = "Get new token",
             operationId = "getToken",
@@ -113,7 +120,7 @@ public class AuthController {
             tags = {"Authorization"}
     )
     @PostMapping(value = "/register", produces = "application/json")
-    public TokenResponse register(
+    public ResponseEntity<TokenResponse> register(
             @Parameter(description = "Username / E-Mail", required = true)
             @RequestParam(name = "email", required = true)
             String email,
@@ -128,8 +135,11 @@ public class AuthController {
             String password
     ) throws GeneralSecurityException, IOException {
         String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt());
-        val newMember = new MemberEntity(UUID.randomUUID(), email, firstname, lastname, passwordHash, false);
-        memberRepository.save(newMember);
-        return getToken("password", "", email, password);
+        try{
+            memberService.create(new MemberEntity(UUID.randomUUID(), email, firstname, lastname, passwordHash, false));
+        } catch(UserAlreadyExistsException e){
+            return new ResponseEntity<>(HttpStatus.CONFLICT);
+        }
+        return new ResponseEntity<>(getToken("password", "", email, password), HttpStatus.OK);
     }
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 6a6fcef..329c4a5 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -15,6 +15,7 @@ import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.web.bind.annotation.*;
 
+import javax.naming.NoPermissionException;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
@@ -66,6 +67,8 @@ public class BookingController {
             bookingService.delete(bookingid, authentication);
         } catch(BookingNotFoundException e){
             return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+        } catch (NoPermissionException e){
+            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
         }
         return new ResponseEntity<>(HttpStatus.NO_CONTENT);
     }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
index 60eeac9..d1d5d57 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
@@ -82,9 +82,4 @@ public class MemberController {
                 return new ResponseEntity<>(HttpStatus.NOT_FOUND);
             }
     }
-
-    //Get Roles as String Set
-    private Set<String> getRolesSet(Authentication authentication){
-        return authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet());
-    }
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
index dbf4c50..046aee3 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
@@ -1,5 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.entity;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
@@ -34,6 +35,11 @@ public class BookingEntity implements Serializable {
     @Schema(accessMode = Schema.AccessMode.READ_ONLY)
     private MemberEntity member;
 
+    @Transient
+    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
+    @Schema(accessMode = Schema.AccessMode.WRITE_ONLY)
+    private UUID memberId;
+
     @Column(name = "date", nullable = false)
     private Date date;
 
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/exception/BookingAlreadyExistsException.java b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/BookingAlreadyExistsException.java
new file mode 100644
index 0000000..c26d674
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/BookingAlreadyExistsException.java
@@ -0,0 +1,7 @@
+package com.github.floriangubler.coworkspacemgr.exception;
+
+public class BookingAlreadyExistsException extends RuntimeException {
+    public BookingAlreadyExistsException(String errorMessage) {
+        super(errorMessage);
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/exception/UserAlreadyExistsException.java b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/UserAlreadyExistsException.java
new file mode 100644
index 0000000..bfe492c
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/UserAlreadyExistsException.java
@@ -0,0 +1,7 @@
+package com.github.floriangubler.coworkspacemgr.exception;
+
+public class UserAlreadyExistsException extends RuntimeException {
+    public UserAlreadyExistsException(String errorMessage) {
+        super(errorMessage);
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
index 12948b2..d496c04 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
@@ -10,7 +10,6 @@ import java.util.UUID;
 public interface BookingRepository extends JpaRepository<BookingEntity, UUID> {
     List<BookingEntity> findAll();
 
-    //TODO
     @Query("SELECT b from BOOKING b where b.member.id = :memberId")
     List<BookingEntity> findAllByMemberId(UUID memberId);
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
index 5eb0d50..1593868 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
@@ -10,7 +10,7 @@ import java.util.UUID;
 public interface MemberRepository extends CrudRepository<MemberEntity, UUID> {
     List<MemberEntity> findAll();
 
-    Optional<MemberEntity> findByEmail(String username);
+    Optional<MemberEntity> findByEmail(String email);
 
     void deleteById(UUID memberid);
 }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
index 9d949b3..e57664e 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
@@ -1,5 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.service;
 
+import com.github.floriangubler.coworkspacemgr.exception.BookingAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.exception.BookingNotFoundException;
 import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.repository.BookingRepository;
@@ -8,6 +9,7 @@ import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.stereotype.Service;
 
+import javax.naming.NoPermissionException;
 import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
@@ -45,7 +47,11 @@ public class BookingService {
 
     public BookingEntity create(BookingEntity booking) {
         log.info("Executing create booking with id " + booking.getId() + " ...");
-        return repository.save(booking);
+        if(repository.findById(booking.getId()).isEmpty()){
+            return repository.save(booking);
+        } else{
+            throw new BookingAlreadyExistsException("Booking with Id " + booking.getId() + " already exists");
+        }
     }
 
     public BookingEntity update(BookingEntity updatedBooking, UUID bookingid) {
@@ -58,13 +64,15 @@ public class BookingService {
         }
     }
 
-    public void delete(UUID bookingid, Authentication authentication) {
+    public void delete(UUID bookingid, Authentication authentication) throws NoPermissionException {
         Optional<BookingEntity> delbooking = repository.findById(bookingid);
         if(delbooking.isPresent()){
             //Auth User is owner of Booking or is Admin
             if(delbooking.get().getMember().getId().equals(UUID.fromString(authentication.getName())) || authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet()).contains(ADMINROLE)){
                 log.info("Executing delete Booking with id " + bookingid + " ...");
                 repository.deleteById(bookingid);
+            } else{
+                throw new NoPermissionException("No Permission to delete other bookings");
             }
         } else{
             throw new BookingNotFoundException("Requested Booking to delete not found");
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
index 2a0affb..2ea02da 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
@@ -1,5 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.service;
 
+import com.github.floriangubler.coworkspacemgr.exception.UserAlreadyExistsException;
 import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
 import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
 import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
@@ -24,6 +25,14 @@ public class MemberService {
         return repository.findAll();
     }
 
+    public MemberEntity create(MemberEntity member){
+        if(repository.findByEmail(member.getEmail()).isEmpty()){
+            log.info("Executing update user with id " + member.getId() + " ...");
+            return repository.save(member);
+        } else{
+            throw new UserAlreadyExistsException("Member with email '" + member.getEmail() + "' already exists");
+        }
+    }
     public MemberEntity update(MemberEntity member, UUID memberid){
         if(repository.findById(memberid).isPresent()){
             log.info("Executing update user with id " + memberid + " ...");

commit 20d53cc06647246ec5e7ed8b439ea9994324e9e3
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 08:42:58 2022 +0200

    Update Rest Files

diff --git a/database.h2.mv.db b/database.h2.mv.db
index 5e27b5e..d302c0c 100644
Binary files a/database.h2.mv.db and b/database.h2.mv.db differ
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
index e4f074c..95c3789 100644
--- a/http-requests/client-requests.rest
+++ b/http-requests/client-requests.rest
@@ -1,38 +1,90 @@
-// Get all games
-GET http://localhost:8080/games
+// Bookings
+//Get all bookings
+GET http://localhost:8080/api/bookings/
 Authorization: Bearer {{jwt}}
 
 ###
 
-// Get one specific game
-GET http://localhost:8080/games/413e2297-b84b-42ef-97ed-16a8a9d1d671
+//Get user bookings
+GET http://localhost:8080/api/bookings/true
 Authorization: Bearer {{jwt}}
 
 ###
 
-// Create a new game
-POST http://localhost:8080/games/
+//Create new booking
+POST http://localhost:8080/api/bookings/
 Authorization: Bearer {{jwt}}
 Content-Type: application/json
 
 {
-  "name": "World of Warcraft",
-  "categoryId": "e1eec954-6ef4-4926-8183-7575af189f2a"
+  "member": {
+    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
+    "email": "string",
+    "firstname": "string",
+    "lastname": "string",
+    "passwordHash": "string",
+    "isAdmin": true
+  },
+  "date": "2022-09-21T06:31:54.404Z",
+  "time": "MORNING",
+  "status": "ORDERED"
 }
 
 ###
 
-// Update one specific game
-PUT http://localhost:8080/games/413e2297-b84b-42ef-97ed-16a8a9d1d671
+//Update a booking
+PUT http://localhost:8080/api/bookings/413e2297-b84b-42ef-97ed-16a8a9d1d671
 Authorization: Bearer {{jwt}}
+Content-Type: application/json
+
+{
+  "date": "2022-09-21",
+  "time": "MORNING",
+  "status": "ORDERED"
+}
+
+###
+
+//Delete a booking
+DELETE http://localhost:8080/api/bookings/413e2297-b84b-42ef-97ed-16a8a9d1d671
+Authorization: Bearer {{jwt}}
+
+###
+
+//Member
+//Get members
+GET http://localhost:8080/api/members
+Authorization: Bearer {{jwt}}
+
+###
+
+//Update a member
+POST http://localhost:8080/api/members/register
+Authorization: Bearer {{jwt}}
+Content-Type: application/json
 
 {
-  "name": "World of Warcraft 2",
-  "categoryId": "e1eec954-6ef4-4926-8183-7575af189f2a"
+  "email": "test@test.ch",
+  "firstname": "test",
+  "lastname": "test",
+  "password": "test123"
 }
 
 ###
 
-// Delete one specific and existing game
-DELETE http://localhost:8080/games/413e2297-b84b-42ef-97ed-16a8a9d1d671
+//Update a member
+PUT http://localhost:8080/api/members/9135f11e-1b66-4ee6-bbae-df37303cc154
 Authorization: Bearer {{jwt}}
+Content-Type: application/json
+
+{
+  "lastname": "Test"
+}
+
+###
+
+//Delete a member
+DELETE http://localhost:8080/api/members/9135f11e-1b66-4ee6-bbae-df37303cc154
+Authorization: Bearer {{jwt}}
+
+###
\ No newline at end of file
diff --git a/http-requests/http-client.env.json b/http-requests/http-client.env.json
index 5abdec1..fd86ba6 100644
--- a/http-requests/http-client.env.json
+++ b/http-requests/http-client.env.json
@@ -1,11 +1,11 @@
 {
   "admin": {
-    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiODQxMzE0N2ItNTNjNy00YzIyLWE0OTctODk5M2VlMjdmZjAyIiwic2NvcGUiOltdLCJuYW1lIjoibmlrb2xhQHN0YW5rb3ZpYy54eXoiLCJ0eXAiOiJCZWFyZXIiLCJleHAiOjE2NjM2NTgyNjMsImlhdCI6MTY2MzU3MTg2MywianRpIjoiN2Y2MGEyNTMtNDliZS00YWUzLTlkNzUtMzEyZWRmN2RjZTZmIn0.0MixN8XZkSilbuNl2SLPfRA25sxS9K1rFAQQ3iavSGVbItk4ewMEkmofgT1pipwAtXx8XsKclmt4eT25b-ddjw"
+    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0Iiwic2NvcGUiOlsiQURNSU4iXSwibmFtZSI6ImFkbWluQHRlc3QuY2giLCJ0eXAiOiJCZWFyZXIiLCJleHAiOjE2NjM3NjI0NTEsImlhdCI6MTY2MzY3NjA1MSwianRpIjoiOTNkMjlhMjItYWNlZS00M2ZmLWIwMzEtZWI1MmI5Nzg3ODQxIn0.B7usabZ7oh_Jh2yxjljn9-AIP3ZQbsWn3ugz_SAZiQlcJIa2ehDUP4CNzBw6zUvqbCM_rZfDJMh7zgP7TdaSLQ"
   },
   "member": {
-    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0IiwiaWF0IjoxNjYzMTQ4Njc0LCJleHAiOjE2NjMzNDg2NzQsImlzcyI6Imh0dHBzOi8vYXBpLmFsZWV2YS5pby9hdXRoIiwidHlwIjoiQmVhcmVyIn0.WFs8NcPeqdLf89unjx1cqPa5U0XYN6ecrDt6X2l1tCsdWNtUDxG5T6TeMMvumbqwZ9C0Z_djhYGdyHBzeKzCbg\n"
+    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0IiwiaWF0IjoxNjYzMTQ4Njc0LCJleHAiOjE2NjMzNDg2NzQsImlzcyI6Imh0dHBzOi8vYXBpLmFsZWV2YS5pby9hdXRoIiwidHlwIjoiQmVhcmVyIn0.WFs8NcPeqdLf89unjx1cqPa5U0XYN6ecrDt6X2l1tCsdWNtUDxG5T6TeMMvumbqwZ9C0Z_djhYGdyHBzeKzCbg"
   },
   "user": {
-    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0IiwiaWF0IjoxNjYzMTQ4Njc0LCJleHAiOjE2NjMzNDg2NzQsImlzcyI6Imh0dHBzOi8vYXBpLmFsZWV2YS5pby9hdXRoIiwidHlwIjoiQmVhcmVyIn0.WFs8NcPeqdLf89unjx1cqPa5U0XYN6ecrDt6X2l1tCsdWNtUDxG5T6TeMMvumbqwZ9C0Z_djhYGdyHBzeKzCbg\n"
+    "jwt": ""
   }
 }
\ No newline at end of file
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java
index 3309cb3..250aea7 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java
@@ -14,7 +14,7 @@ public class OpenApiConfig {
     @Bean
     public GroupedOpenApi publicApi() {
         return GroupedOpenApi.builder()
-                .packagesToScan("com.github.floriangubler.controller")
+                .packagesToScan("com.github.floriangubler.coworkspacemgr.controller")
                 .group("coworkspace-api")
                 .build();
     }
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 04b7c6a..6a6fcef 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -48,7 +48,7 @@ public class BookingController {
         if(onlymy != null && onlymy){
             return bookingService.findUserBookings(userid);
         } else{
-            return bookingService.findBookings(!userroles.contains(ADMINROLE));
+            return bookingService.findBookings(!userroles.contains(ADMINROLE), userid);
         }
     }
 
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
index 00e6cd6..60eeac9 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
@@ -69,7 +69,7 @@ public class MemberController {
             description = "Delete a Member (Only Admin)",
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
-    @PostMapping("/")
+    @DeleteMapping("/")
     @PreAuthorize("hasRole(ADMINROLE)")
     ResponseEntity<Void> deletemember(
             @Parameter(description = "MemberID", required = true)
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
index 6ea5694..9d949b3 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
@@ -29,13 +29,15 @@ public class BookingService {
         return repository.findAllByMemberId(memberID);
     }
 
-    public List<BookingEntity> findBookings(Boolean anonymise) {
-        log.info("Executing find all User Bookings ...");
+    public List<BookingEntity> findBookings(Boolean anonymise, UUID userid) {
+        log.info("Executing find all Bookings ...");
         List<BookingEntity> result = repository.findAll();
         if(anonymise){
             for(BookingEntity booking : result){
-                booking.setMember(null);
-                booking.setId(null);
+                if(!booking.getMember().getId().equals(userid)) {
+                    booking.setMember(null);
+                    booking.setId(null);
+                }
             }
         }
         return result;

commit 075daf468acca930fb089e2e7a522f050b536c52
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 08:13:07 2022 +0200

    Rename Packages

diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index ee83569..9b2d03e 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -3,8 +3,8 @@ package com.github.floriangubler.coworkspacemgr.controller;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
-import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
-import com.github.floriangubler.coworkspacemgr.model.TokenResponse;
+import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.entity.TokenResponse;
 import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 5076cac..04b7c6a 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -1,9 +1,9 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
 import com.github.floriangubler.coworkspacemgr.exception.BookingNotFoundException;
-import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.service.BookingService;
-import com.github.floriangubler.coworkspacemgr.model.BookingStatus;
+import com.github.floriangubler.coworkspacemgr.entity.BookingStatus;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
index 4ef09e8..00e6cd6 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
@@ -1,6 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.controller;
 
-import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
 import com.github.floriangubler.coworkspacemgr.service.MemberService;
 import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
 import io.swagger.v3.oas.annotations.Operation;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
similarity index 96%
rename from src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingEntity.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
index 9aa2172..dbf4c50 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingEntity.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.coworkspacemgr.model;
+package com.github.floriangubler.coworkspacemgr.entity;
 
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Getter;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingStatus.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingStatus.java
similarity index 56%
rename from src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingStatus.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingStatus.java
index 8c283a9..f19db6b 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingStatus.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingStatus.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.coworkspacemgr.model;
+package com.github.floriangubler.coworkspacemgr.entity;
 
 public enum BookingStatus {
     ORDERED,
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingTime.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingTime.java
similarity index 54%
rename from src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingTime.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingTime.java
index da5234d..d94cd54 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingTime.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/BookingTime.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.coworkspacemgr.model;
+package com.github.floriangubler.coworkspacemgr.entity;
 
 public enum BookingTime {
     MORNING,
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/model/MemberEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
similarity index 96%
rename from src/main/java/com/github/floriangubler/coworkspacemgr/model/MemberEntity.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
index 7e3c721..eba8dec 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/model/MemberEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/MemberEntity.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.coworkspacemgr.model;
+package com.github.floriangubler.coworkspacemgr.entity;
 
 import lombok.*;
 import org.hibernate.Hibernate;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/model/TokenResponse.java b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/TokenResponse.java
similarity index 90%
rename from src/main/java/com/github/floriangubler/coworkspacemgr/model/TokenResponse.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/entity/TokenResponse.java
index 4bdc46a..b6944e9 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/model/TokenResponse.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/entity/TokenResponse.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.coworkspacemgr.model;
+package com.github.floriangubler.coworkspacemgr.entity;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.AllArgsConstructor;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
index c102752..12948b2 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
@@ -1,6 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.repository;
 
-import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
index 908f697..5eb0d50 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
@@ -1,6 +1,6 @@
 package com.github.floriangubler.coworkspacemgr.repository;
 
-import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
 import org.springframework.data.repository.CrudRepository;
 
 import java.util.List;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java
index 75393b4..25e0f9d 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java
@@ -7,7 +7,7 @@ import com.auth0.jwt.exceptions.InvalidClaimException;
 import com.auth0.jwt.exceptions.SignatureVerificationException;
 import com.auth0.jwt.exceptions.TokenExpiredException;
 import com.auth0.jwt.interfaces.DecodedJWT;
-import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
 import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import lombok.val;
 import org.springframework.beans.factory.annotation.Autowired;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
index 72a7a0b..6ea5694 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
@@ -1,7 +1,7 @@
 package com.github.floriangubler.coworkspacemgr.service;
 
 import com.github.floriangubler.coworkspacemgr.exception.BookingNotFoundException;
-import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.repository.BookingRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.core.Authentication;
diff --git a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
index d3f7e7e..2a0affb 100644
--- a/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
@@ -1,7 +1,7 @@
 package com.github.floriangubler.coworkspacemgr.service;
 
 import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
-import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.entity.MemberEntity;
 import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Service;
diff --git a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
index bd77ad0..7f936a4 100644
--- a/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
@@ -2,7 +2,7 @@ package com.github.floriangubler.coworkspacemgr;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.entity.BookingEntity;
 import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
 import org.junit.jupiter.api.Test;

commit ddfffcf361b62c1615ae28a754481de96a16c0d6
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 08:11:35 2022 +0200

    Define Packages

diff --git a/database.h2.trace.db b/database.h2.trace.db
index 367f40c..c30df42 100644
--- a/database.h2.trace.db
+++ b/database.h2.trace.db
@@ -39,7 +39,7 @@ Wrong user name or password [28000-214]
 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
 	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
-	at com.github.floriangubler.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:65)
+	at JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:65)
 	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
 	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
 	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
diff --git a/pom.xml b/pom.xml
index 4df7c72..6f95798 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
 	</parent>
 
 	<groupId>com.github.floriangubler</groupId>
-	<artifactId>coworkspace-manager</artifactId>
+	<artifactId>coworkspacemgr</artifactId>
 	<version>1.0.0</version>
 	<name>coworkspace-manager</name>
 	<description>M223 Coworkspace Abschlussprojekt</description>
diff --git a/src/main/java/com/github/floriangubler/CoworkspaceManagerApplication.java b/src/main/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerApplication.java
similarity index 86%
rename from src/main/java/com/github/floriangubler/CoworkspaceManagerApplication.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerApplication.java
index 63b1392..1836991 100644
--- a/src/main/java/com/github/floriangubler/CoworkspaceManagerApplication.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerApplication.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler;
+package com.github.floriangubler.coworkspacemgr;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
diff --git a/src/main/java/com/github/floriangubler/configuration/OpenApiConfig.java b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java
similarity index 94%
rename from src/main/java/com/github/floriangubler/configuration/OpenApiConfig.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java
index 757c4fb..3309cb3 100644
--- a/src/main/java/com/github/floriangubler/configuration/OpenApiConfig.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/OpenApiConfig.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.configuration;
+package com.github.floriangubler.coworkspacemgr.configuration;
 
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.OpenAPI;
diff --git a/src/main/java/com/github/floriangubler/configuration/SecurityConfig.java b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java
similarity index 85%
rename from src/main/java/com/github/floriangubler/configuration/SecurityConfig.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java
index 529d25c..57fa7a4 100644
--- a/src/main/java/com/github/floriangubler/configuration/SecurityConfig.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/configuration/SecurityConfig.java
@@ -1,9 +1,9 @@
-package com.github.floriangubler.configuration;
+package com.github.floriangubler.coworkspacemgr.configuration;
 
-import com.github.floriangubler.security.JwtAuthenticationEntryPoint;
-import com.github.floriangubler.security.JwtAuthenticationFilter;
-import com.github.floriangubler.security.JwtServiceHMAC;
-import com.github.floriangubler.repository.MemberRepository;
+import com.github.floriangubler.coworkspacemgr.security.JwtAuthenticationEntryPoint;
+import com.github.floriangubler.coworkspacemgr.security.JwtAuthenticationFilter;
+import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
+import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.HttpMethod;
diff --git a/src/main/java/com/github/floriangubler/controller/AuthController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
similarity index 94%
rename from src/main/java/com/github/floriangubler/controller/AuthController.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
index 3a42429..ee83569 100644
--- a/src/main/java/com/github/floriangubler/controller/AuthController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/AuthController.java
@@ -1,12 +1,12 @@
-package com.github.floriangubler.controller;
+package com.github.floriangubler.coworkspacemgr.controller;
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
-import com.github.floriangubler.model.MemberEntity;
-import com.github.floriangubler.model.TokenResponse;
-import com.github.floriangubler.repository.MemberRepository;
-import com.github.floriangubler.security.JwtServiceHMAC;
+import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.model.TokenResponse;
+import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
+import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.crypto.bcrypt.BCrypt;
diff --git a/src/main/java/com/github/floriangubler/controller/BookingController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
similarity index 92%
rename from src/main/java/com/github/floriangubler/controller/BookingController.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
index 262a5c1..5076cac 100644
--- a/src/main/java/com/github/floriangubler/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/BookingController.java
@@ -1,9 +1,9 @@
-package com.github.floriangubler.controller;
+package com.github.floriangubler.coworkspacemgr.controller;
 
-import com.github.floriangubler.exception.BookingNotFoundException;
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.model.BookingStatus;
-import com.github.floriangubler.service.BookingService;
+import com.github.floriangubler.coworkspacemgr.exception.BookingNotFoundException;
+import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.service.BookingService;
+import com.github.floriangubler.coworkspacemgr.model.BookingStatus;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
diff --git a/src/main/java/com/github/floriangubler/controller/MemberController.java b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
similarity index 87%
rename from src/main/java/com/github/floriangubler/controller/MemberController.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
index 332c299..4ef09e8 100644
--- a/src/main/java/com/github/floriangubler/controller/MemberController.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/controller/MemberController.java
@@ -1,12 +1,8 @@
-package com.github.floriangubler.controller;
+package com.github.floriangubler.coworkspacemgr.controller;
 
-import com.github.floriangubler.exception.BookingNotFoundException;
-import com.github.floriangubler.exception.UserNotFoundException;
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.model.BookingStatus;
-import com.github.floriangubler.model.MemberEntity;
-import com.github.floriangubler.service.BookingService;
-import com.github.floriangubler.service.MemberService;
+import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.service.MemberService;
+import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
diff --git a/src/main/java/com/github/floriangubler/exception/BookingNotFoundException.java b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/BookingNotFoundException.java
similarity index 73%
rename from src/main/java/com/github/floriangubler/exception/BookingNotFoundException.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/exception/BookingNotFoundException.java
index cebf154..38e494e 100644
--- a/src/main/java/com/github/floriangubler/exception/BookingNotFoundException.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/BookingNotFoundException.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.exception;
+package com.github.floriangubler.coworkspacemgr.exception;
 
 public class BookingNotFoundException extends RuntimeException {
     public BookingNotFoundException(String errorMessage) {
diff --git a/src/main/java/com/github/floriangubler/exception/UserNotFoundException.java b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/UserNotFoundException.java
similarity index 72%
rename from src/main/java/com/github/floriangubler/exception/UserNotFoundException.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/exception/UserNotFoundException.java
index 59098cb..043ae21 100644
--- a/src/main/java/com/github/floriangubler/exception/UserNotFoundException.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/exception/UserNotFoundException.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.exception;
+package com.github.floriangubler.coworkspacemgr.exception;
 
 public class UserNotFoundException extends RuntimeException {
     public UserNotFoundException(String errorMessage) {
diff --git a/src/main/java/com/github/floriangubler/model/BookingEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingEntity.java
similarity index 96%
rename from src/main/java/com/github/floriangubler/model/BookingEntity.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingEntity.java
index 25be324..9aa2172 100644
--- a/src/main/java/com/github/floriangubler/model/BookingEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingEntity.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.model;
+package com.github.floriangubler.coworkspacemgr.model;
 
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Getter;
diff --git a/src/main/java/com/github/floriangubler/model/BookingStatus.java b/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingStatus.java
similarity index 56%
rename from src/main/java/com/github/floriangubler/model/BookingStatus.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingStatus.java
index 88a213d..8c283a9 100644
--- a/src/main/java/com/github/floriangubler/model/BookingStatus.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingStatus.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.model;
+package com.github.floriangubler.coworkspacemgr.model;
 
 public enum BookingStatus {
     ORDERED,
diff --git a/src/main/java/com/github/floriangubler/model/BookingTime.java b/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingTime.java
similarity index 54%
rename from src/main/java/com/github/floriangubler/model/BookingTime.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingTime.java
index 6290e3e..da5234d 100644
--- a/src/main/java/com/github/floriangubler/model/BookingTime.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/model/BookingTime.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.model;
+package com.github.floriangubler.coworkspacemgr.model;
 
 public enum BookingTime {
     MORNING,
diff --git a/src/main/java/com/github/floriangubler/model/MemberEntity.java b/src/main/java/com/github/floriangubler/coworkspacemgr/model/MemberEntity.java
similarity index 96%
rename from src/main/java/com/github/floriangubler/model/MemberEntity.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/model/MemberEntity.java
index 4cc282c..7e3c721 100644
--- a/src/main/java/com/github/floriangubler/model/MemberEntity.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/model/MemberEntity.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.model;
+package com.github.floriangubler.coworkspacemgr.model;
 
 import lombok.*;
 import org.hibernate.Hibernate;
diff --git a/src/main/java/com/github/floriangubler/model/TokenResponse.java b/src/main/java/com/github/floriangubler/coworkspacemgr/model/TokenResponse.java
similarity index 91%
rename from src/main/java/com/github/floriangubler/model/TokenResponse.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/model/TokenResponse.java
index 20a1e8d..4bdc46a 100644
--- a/src/main/java/com/github/floriangubler/model/TokenResponse.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/model/TokenResponse.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.model;
+package com.github.floriangubler.coworkspacemgr.model;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.AllArgsConstructor;
diff --git a/src/main/java/com/github/floriangubler/repository/BookingRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
similarity index 73%
rename from src/main/java/com/github/floriangubler/repository/BookingRepository.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
index d86d3f4..c102752 100644
--- a/src/main/java/com/github/floriangubler/repository/BookingRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/BookingRepository.java
@@ -1,7 +1,6 @@
-package com.github.floriangubler.repository;
+package com.github.floriangubler.coworkspacemgr.repository;
 
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
 
diff --git a/src/main/java/com/github/floriangubler/repository/MemberRepository.java b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
similarity index 69%
rename from src/main/java/com/github/floriangubler/repository/MemberRepository.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
index 7df8c4c..908f697 100644
--- a/src/main/java/com/github/floriangubler/repository/MemberRepository.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/repository/MemberRepository.java
@@ -1,7 +1,6 @@
-package com.github.floriangubler.repository;
+package com.github.floriangubler.coworkspacemgr.repository;
 
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
 import org.springframework.data.repository.CrudRepository;
 
 import java.util.List;
diff --git a/src/main/java/com/github/floriangubler/security/JwtAuthenticationEntryPoint.java b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtAuthenticationEntryPoint.java
similarity index 92%
rename from src/main/java/com/github/floriangubler/security/JwtAuthenticationEntryPoint.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtAuthenticationEntryPoint.java
index 93d62ee..b7a6ead 100644
--- a/src/main/java/com/github/floriangubler/security/JwtAuthenticationEntryPoint.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtAuthenticationEntryPoint.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.security;
+package com.github.floriangubler.coworkspacemgr.security;
 
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.web.AuthenticationEntryPoint;
diff --git a/src/main/java/com/github/floriangubler/security/JwtAuthenticationFilter.java b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtAuthenticationFilter.java
similarity index 95%
rename from src/main/java/com/github/floriangubler/security/JwtAuthenticationFilter.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtAuthenticationFilter.java
index a380aef..9f99ad3 100644
--- a/src/main/java/com/github/floriangubler/security/JwtAuthenticationFilter.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtAuthenticationFilter.java
@@ -1,8 +1,8 @@
-package com.github.floriangubler.security;
+package com.github.floriangubler.coworkspacemgr.security;
 
 import com.auth0.jwt.exceptions.JWTVerificationException;
 import com.auth0.jwt.interfaces.DecodedJWT;
-import com.github.floriangubler.repository.MemberRepository;
+import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import lombok.val;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.context.SecurityContextHolder;
diff --git a/src/main/java/com/github/floriangubler/security/JwtServiceHMAC.java b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java
similarity index 96%
rename from src/main/java/com/github/floriangubler/security/JwtServiceHMAC.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java
index e80aa87..75393b4 100644
--- a/src/main/java/com/github/floriangubler/security/JwtServiceHMAC.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/security/JwtServiceHMAC.java
@@ -1,4 +1,4 @@
-package com.github.floriangubler.security;
+package com.github.floriangubler.coworkspacemgr.security;
 
 import com.auth0.jwt.JWT;
 import com.auth0.jwt.algorithms.Algorithm;
@@ -7,8 +7,8 @@ import com.auth0.jwt.exceptions.InvalidClaimException;
 import com.auth0.jwt.exceptions.SignatureVerificationException;
 import com.auth0.jwt.exceptions.TokenExpiredException;
 import com.auth0.jwt.interfaces.DecodedJWT;
-import com.github.floriangubler.model.MemberEntity;
-import com.github.floriangubler.repository.MemberRepository;
+import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import lombok.val;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
diff --git a/src/main/java/com/github/floriangubler/service/BookingService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
similarity index 89%
rename from src/main/java/com/github/floriangubler/service/BookingService.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
index 6b7f064..72a7a0b 100644
--- a/src/main/java/com/github/floriangubler/service/BookingService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/BookingService.java
@@ -1,8 +1,8 @@
-package com.github.floriangubler.service;
+package com.github.floriangubler.coworkspacemgr.service;
 
-import com.github.floriangubler.exception.BookingNotFoundException;
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.repository.BookingRepository;
+import com.github.floriangubler.coworkspacemgr.exception.BookingNotFoundException;
+import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.repository.BookingRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
diff --git a/src/main/java/com/github/floriangubler/service/MemberService.java b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
similarity index 66%
rename from src/main/java/com/github/floriangubler/service/MemberService.java
rename to src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
index 2f9a9ed..d3f7e7e 100644
--- a/src/main/java/com/github/floriangubler/service/MemberService.java
+++ b/src/main/java/com/github/floriangubler/coworkspacemgr/service/MemberService.java
@@ -1,20 +1,13 @@
-package com.github.floriangubler.service;
-
-import com.github.floriangubler.exception.BookingNotFoundException;
-import com.github.floriangubler.exception.UserNotFoundException;
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.model.MemberEntity;
-import com.github.floriangubler.repository.BookingRepository;
-import com.github.floriangubler.repository.MemberRepository;
+package com.github.floriangubler.coworkspacemgr.service;
+
+import com.github.floriangubler.coworkspacemgr.exception.UserNotFoundException;
+import com.github.floriangubler.coworkspacemgr.model.MemberEntity;
+import com.github.floriangubler.coworkspacemgr.repository.MemberRepository;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.GrantedAuthority;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
-import java.util.Optional;
 import java.util.UUID;
-import java.util.stream.Collectors;
 
 @Service
 @Slf4j
diff --git a/src/test/java/com/github/floriangubler/CoworkspaceManagerIntegrationTest.java b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
similarity index 89%
rename from src/test/java/com/github/floriangubler/CoworkspaceManagerIntegrationTest.java
rename to src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
index aa8f32e..bd77ad0 100644
--- a/src/test/java/com/github/floriangubler/CoworkspaceManagerIntegrationTest.java
+++ b/src/test/java/com/github/floriangubler/coworkspacemgr/CoworkspaceManagerIntegrationTest.java
@@ -1,9 +1,9 @@
-package com.github.floriangubler;
+package com.github.floriangubler.coworkspacemgr;
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.security.JwtServiceHMAC;
+import com.github.floriangubler.coworkspacemgr.model.BookingEntity;
+import com.github.floriangubler.coworkspacemgr.security.JwtServiceHMAC;
 import lombok.val;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -11,7 +11,6 @@ import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMock
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.servlet.MockMvc;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 

commit 4012f878b981baf36ed1b08c235ecb4b86828050
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Wed Sep 21 08:10:49 2022 +0200

    Add gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..9a8226c
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,80 @@
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff
+.idea
+target
+exampledb*
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# AWS User-specific
+.idea/**/aws.xml
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# Gradle and Maven with auto-import
+# When using Gradle or Maven with auto-import, you should exclude module files,
+# since they will be recreated, and may cause churn.  Uncomment if using
+# auto-import.
+# .idea/artifacts
+# .idea/compiler.xml
+# .idea/jarRepositories.xml
+# .idea/modules.xml
+# .idea/*.iml
+# .idea/modules
+# *.iml
+# *.ipr
+
+# CMake
+cmake-build-*/
+
+# Mongo Explorer plugin
+.idea/**/mongoSettings.xml
+
+# File-based project format
+*.iws
+
+# IntelliJ
+out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# SonarLint plugin
+.idea/sonarlint/
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+# Editor-based Rest Client
+.idea/httpRequests
+
+# Android studio 3.1+ serialized cache file
+.idea/caches/build_file_checksums.ser
\ No newline at end of file

commit 3ea8af7d9f127d4408626377bd96912905b5a0a6
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Tue Sep 20 16:44:24 2022 +0200

    Add all Endpoints

diff --git a/database.h2.mv.db b/database.h2.mv.db
new file mode 100644
index 0000000..5e27b5e
Binary files /dev/null and b/database.h2.mv.db differ
diff --git a/database.h2.trace.db b/database.h2.trace.db
new file mode 100644
index 0000000..367f40c
--- /dev/null
+++ b/database.h2.trace.db
@@ -0,0 +1,99 @@
+2022-09-20 13:39:12 database: wrong user or password; user: "SA"
+org.h2.message.DbException: Falscher Benutzername oder Passwort
+Wrong user name or password [28000-214]
+	at org.h2.message.DbException.get(DbException.java:223)
+	at org.h2.message.DbException.get(DbException.java:199)
+	at org.h2.message.DbException.get(DbException.java:188)
+	at org.h2.engine.Engine.openSession(Engine.java:154)
+	at org.h2.engine.Engine.openSession(Engine.java:222)
+	at org.h2.engine.Engine.createSession(Engine.java:201)
+	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
+	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
+	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:288)
+	at org.h2.server.web.WebServer.getConnection(WebServer.java:808)
+	at org.h2.server.web.WebApp.login(WebApp.java:1033)
+	at org.h2.server.web.WebApp.process(WebApp.java:226)
+	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
+	at org.h2.server.web.WebServlet.doGet(WebServlet.java:129)
+	at org.h2.server.web.WebServlet.doPost(WebServlet.java:166)
+	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
+	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
+	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
+	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
+	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
+	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
+	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:337)
+	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
+	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
+	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
+	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at com.github.floriangubler.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:65)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
+	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
+	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:112)
+	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:82)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:346)
+	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:221)
+	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:186)
+	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
+	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
+	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
+	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
+	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
+	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
+	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
+	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
+	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
+	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
+	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
+	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
+	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
+	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
+	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
+	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
+	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
+	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
+	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
+	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
+	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
+	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
+	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1789)
+	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
+	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
+	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
+	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
+	at java.base/java.lang.Thread.run(Thread.java:833)
+Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Falscher Benutzername oder Passwort
+Wrong user name or password [28000-214]
+	at org.h2.message.DbException.getJdbcSQLException(DbException.java:510)
+	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
+	... 91 more
diff --git a/docs/1_AnforderungenAnalysieren.docx b/docs/1_AnforderungenAnalysieren.docx
index b214b01..9851c5e 100644
--- a/docs/1_AnforderungenAnalysieren.docx
+++ b/docs/1_AnforderungenAnalysieren.docx
@@ -33,5 +33,4 @@ Beruf: IT-Administrator
 Anwendung: André arbeitet bei der Firma, die Coworking Spaces anbietet. Damit alles korrekt verläuft und die Buchungen richtig verwaltet werden, schaut er, dass keine Konflikte entstehen und unterstützt die Kunden bei Problemen. 
 
  Anwendungsfalldiagramm
-   In Projektordner /docs/charts/usecase.plantuml
 
diff --git a/docs/2_PersistenzschichtPlanen.docx b/docs/2_PersistenzschichtPlanen.docx
index e69de29..8b6350e 100644
--- a/docs/2_PersistenzschichtPlanen.docx
+++ b/docs/2_PersistenzschichtPlanen.docx
@@ -0,0 +1,3 @@
+ Persistenz Schicht planen
+ Fachklassendiagramm
+
diff --git a/docs/3_Schnittstellenplanung.docx b/docs/3_Schnittstellenplanung.docx
index e69de29..671636e 100644
--- a/docs/3_Schnittstellenplanung.docx
+++ b/docs/3_Schnittstellenplanung.docx
@@ -0,0 +1,100 @@
+   Schnittstellenplanung
+ Schnittstellen planen
+Methode
+Endpoint
+Security
+Beschreibung
+Request Payload (JSON)
+Responses
+POST
+/api/members/register
+OPEN
+Ein Gast sendet eine E-Mail, Vor- und Nachname, sowie ein Passwort um sich als neuen User zu registrieren. 
+E-Mail, Vorname, Nachname und Passwort
+201  -  CREATED
+User erstellt
+409  -  CONFLICT
+User existiert bereits (E-Mail ist Unique)
+POST
+/api/members/login
+OPEN
+Ein Gast meldet sich mittels E-Mail / Passwort an und erhält einen JWT-Token, sowie einen Refresh Token
+E-Mail & Passwort
+200  -  OK
+Login erfolgreich
+401  -  UNAUTHORIZIZED
+Ungültige Anmeldedaten
+GET
+/api/bookings/{onlymy}
+MITGLIED / ADMIN
+Alle Buchungen ansehen (Für MITGLIED anonymisiert) oder nur eigene Buchungen ansehen (onlymy Parameter)
+-
+200  -  OK
+Erfolgreich (Buchungsliste)
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token
+DELETE
+/api/bookings/{bookingid}
+MITGLIED / ADMIN
+Storniert / löscht eine bestimmte Buchung. Mitglieder können nur eigene Buchungen löschen, Admins alle.
+-
+204  -  NO CONTENT
+Erfolgreich 
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token
+404  -  NOT FOUND
+Buchung nicht gefunden
+POST
+/api/bookings
+MITGLIED / ADMIN
+Erstellt eine neue Buchungsanfrage oder für einen Admin direkt eine Buchung.
+Booking Objekt
+200  -  OK
+Erfolgreich (Booking)
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token
+PUT
+/api/bookings/{bookingid}
+ADMIN
+Verändert eine bestehende Buchung.
+Booking Objekt
+200  -  OK
+Erfolgreich (Booking) 
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+404  -  NOT FOUND
+Buchung nicht gefunden
+GET
+/api/members
+ADMIN
+Gibt alle registrierten Benutzer zurück.
+-
+200  -  OK
+Erfolgreich (Userliste)
+401  - UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+PUT
+/api/members/{memberid}
+ADMIN
+Bearbeitet einen bereits existierenden Member. 
+Member Objekt
+200  -  OK
+Erfolgreich (User)
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+404  -  NOT FOUND
+Member nicht gefunden
+DELETE
+/api/members/{memberid}
+ADMIN
+Löscht einen bereits existierenden Benutzer
+-
+204  -  NO CONTENT
+Erfolgreich 
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+404  -  NOT FOUND
+Member nicht gefunden
+
+ Sequenzdiagramm
+
diff --git a/docs/DokumentationFlorianGubler_19092022.docx b/docs/DokumentationFlorianGubler_19092022.docx
deleted file mode 100644
index 0d683d0..0000000
--- a/docs/DokumentationFlorianGubler_19092022.docx
+++ /dev/null
@@ -1,140 +0,0 @@
-M223 Projektdokumentation
-   Anforderungen analysieren
- Erweiterte Anforderungen
-  Funktional
-  Nicht-Funktional
-  Als Mitglied kann ich alle Buchungen anonymisiert ansehen. 
-  Die Datenbank wird automatisch erstellt und bei jedem Start werden allfällige Änderungen ausgeführt. 
-  Als Administrator kann ich alle Buchungen ansehen (nicht anonymisiert)
-  Es wird ein Refresh Token erstellt, der 2 Wochen gültig ist, mit dem man neue Tokens generieren kann.
-  Als Administrator kann ich alle Buchungsanfragen ausgeben lassen (nicht anonymisiert)
-  Das Passwort muss in der Datenbank gehasht gespeichert werden. 
- Personas
-   
-Name: Siras Sangapilai (Mitglied)
-Alter: 21
-Geschlecht: weiblich
-Beruf: Kauffrau
-Anwendung: Siras arbeitet in einem Kleinunternehmen, welches kein eigenes Büro besitzt. Deshalb nutzt ihre Firma das Coworking Space Angebot für ihre Mitarbeitenden. 
-
-
-   
-Name: Sarah Müller (Mitglied)
-Alter: 24
-Geschlecht: weiblich
-Beruf: HR
-Anwendung: Sarah arbeitet in einem grossen Unternehmen, welches ein eigenes Grossraumbüro besitzt. Dies ist ihr allerdings zu laut und ungeeignet für ihren Workflow, weshalb sie sich entschieden hat, ein Coworking Space Angebot zu nutzen. 
-   
-
-
-Name: André Chabulani (Admin
-Alter: 43
-Geschlecht: männlich
-Beruf: IT-Administrator
-Anwendung: André arbeitet bei der Firma, die Coworking Spaces anbietet. Damit alles korrekt verläuft und die Buchungen richtig verwaltet werden, schaut er, dass keine Konflikte entstehen und unterstützt die Kunden bei Problemen. 
-
- Anwendungsfalldiagramm
-   In Projektordner /docs/charts/usecase.plantuml
- Persistenz Schicht planen
- Fachklassendiagramm
-In Projektordner /docs/charts/usecase.plantuml
- Schnittstellenplanung
- Schnittstellen planen
-Methode
-Endpoint
-Security
-Beschreibung
-Request Payload (JSON)
-Responses
-POST
-/api/members/register
-OPEN
-Ein Gast sendet eine E-Mail, Vor- und Nachname, sowie ein Passwort um sich als neuen User zu registrieren. 
-E-Mail, Vorname, Nachname und Passwort
-201  -  CREATED
-User erstellt
-409  -  CONFLICT
-User existiert bereits (E-Mail ist Unique)
-POST
-/api/members/login
-OPEN
-Ein Gast meldet sich mittels E-Mail / Passwort an und erhält einen JWT-Token, sowie einen Refresh Token
-E-Mail & Passwort
-200  -  OK
-Login erfolgreich
-401  -  UNAUTHORIZIZED
-Ungültige Anmeldedaten
-GET
-/api/bookings/{onlymy}
-MITGLIED / ADMIN
-Alle Buchungen ansehen (Für MITGLIED anonymisiert) oder nur eigene Buchungen ansehen (onlymy Parameter)
--
-200  -  OK
-Erfolgreich (Buchungsliste)
-401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token
-DELETE
-/api/bookings/{bookingid}
-MITGLIED / ADMIN
-Storniert / löscht eine bestimmte Buchung. Mitglieder können nur eigene Buchungen löschen, Admins alle.
--
-204  -  NO CONTENT
-Erfolgreich 
-401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token
-404  -  NOT FOUND
-Buchung nicht gefunden
-POST
-/api/bookings
-MITGLIED / ADMIN
-Erstellt eine neue Buchungsanfrage oder für einen Admin direkt eine Buchung.
-Booking Objekt
-200  -  OK
-Erfolgreich (Booking)
-401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token
-PUT
-/api/bookings/{bookingid}
-ADMIN
-Verändert eine bestehende Buchung.
-Booking Objekt
-200  -  OK
-Erfolgreich (Booking) 
-401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token oder keine Admin Rechte
-404  -  NOT FOUND
-Buchung nicht gefunden
-GET
-/api/members
-ADMIN
-Gibt alle registrierten Benutzer zurück.
--
-200  -  OK
-Erfolgreich (Userliste)
-401  - UNAUTHORIZIZED
-Ungültiger JWT-Token oder keine Admin Rechte
-PUT
-/api/members/{memberid}
-ADMIN
-Bearbeitet einen bereits existierenden Member. 
-Member Objekt
-200  -  OK
-Erfolgreich (User)
-401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token oder keine Admin Rechte
-404  -  NOT FOUND
-Member nicht gefunden
-DELETE
-/api/members/{memberid}
-ADMIN
-Löscht einen bereits existierenden Benutzer
--
-204  -  NO CONTENT
-Erfolgreich 
-401  -  UNAUTHORIZIZED
-Ungültiger JWT-Token oder keine Admin Rechte
-404  -  NOT FOUND
-Member nicht gefunden
-
- Sequenzdiagramm
-In Projektordner /docs/charts/sequence_cancelbook.plantuml
diff --git a/docs/charts/sequence_cancelbook.puml b/docs/charts/sequence_cancelbook.puml
index f1f81ca..4ca476e 100644
--- a/docs/charts/sequence_cancelbook.puml
+++ b/docs/charts/sequence_cancelbook.puml
@@ -1,5 +1,5 @@
 @startuml
-Client -> Server: Request with JWT: /api/booking/cancel/{bookingid}
+Client -> Server: JWT Request: /api/bookings/{bookingid}
 Server -> Server: Verify JWT Authentication
 alt JWT verified
     Server -> Datenbank: findbyId(bookingid)
diff --git a/src/main/java/com/github/floriangubler/controller/BookingController.java b/src/main/java/com/github/floriangubler/controller/BookingController.java
index af6bc15..262a5c1 100644
--- a/src/main/java/com/github/floriangubler/controller/BookingController.java
+++ b/src/main/java/com/github/floriangubler/controller/BookingController.java
@@ -10,6 +10,7 @@ import io.swagger.v3.oas.annotations.security.SecurityRequirement;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.web.bind.annotation.*;
@@ -25,7 +26,7 @@ import java.util.stream.Collectors;
 public class BookingController {
 
     private final BookingService bookingService;
-    private final String ADMINROLE = "ROLE_ADMIN";
+    private final static String ADMINROLE = "ROLE_ADMIN";
 
     BookingController(BookingService bookingService) {
         this.bookingService = bookingService;
@@ -80,69 +81,34 @@ public class BookingController {
             @RequestBody(required = true)
             BookingEntity booking,
             Authentication authentication) {
-        BookingStatus status = BookingStatus.ORDERED;
         if(getRolesSet(authentication).contains(ADMINROLE)){
-            status = BookingStatus.APPROVED;
+            booking.setStatus(BookingStatus.APPROVED);
+        } else{
+            booking.setStatus(BookingStatus.ORDERED);
         }
-        return bookingService.create(booking, status);
+        return bookingService.create(booking);
     }
 
     @Operation(
-            summary = "",
-            description = "",
+            summary = "Update Booking",
+            description = "Update a Booking (Only Admin)",
             security = {@SecurityRequirement(name = "JWT Auth")}
     )
     @PutMapping("/{bookingid}")
-    BookingEntity updatebooking(
+    @PreAuthorize("hasRole(ADMINROLE)")
+    ResponseEntity<BookingEntity> updatebooking(
             @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Booking Update", required = true)
             @RequestBody(required = true)
             BookingEntity booking,
-            @RequestParam(name="bookingid", required = true)
-            BookingEntity bookingid,
-            Authentication authentication) {
-        return bookingService.update(booking, bookingid);
-    }
-
-    @Operation(
-            summary = "",
-            description = "",
-            security = {@SecurityRequirement(name = "JWT Auth")}
-    )
-    @PostMapping("/")
-    ResponseEntity<BookingEntity> test(
             @Parameter(description = "BookingID", required = true)
-            @RequestParam(name = "bookingid", required = true)
-            BookingEntity bookingid,
-            Authentication authentication) {
-        return null;
-    }
-
-    @Operation(
-            summary = "",
-            description = "",
-            security = {@SecurityRequirement(name = "JWT Auth")}
-    )
-    @PostMapping("/")
-    ResponseEntity<BookingEntity> test(
-            @Parameter(description = "BookingID", required = true)
-            @RequestParam(name = "bookingid", required = true)
-            BookingEntity bookingid,
-            Authentication authentication) {
-        return null;
-    }
-
-    @Operation(
-            summary = "",
-            description = "",
-            security = {@SecurityRequirement(name = "JWT Auth")}
-    )
-    @PostMapping("/")
-    ResponseEntity<BookingEntity> test(
-            @Parameter(description = "BookingID", required = true)
-            @RequestParam(name = "bookingid", required = true)
-            BookingEntity bookingid,
+            @RequestParam(name="bookingid", required = true)
+            UUID bookingid,
             Authentication authentication) {
-        return null;
+        try{
+            return new ResponseEntity<>(bookingService.update(booking, bookingid), HttpStatus.OK);
+        } catch(BookingNotFoundException e){
+            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+        }
     }
 
     //Get Roles as String Set
diff --git a/src/main/java/com/github/floriangubler/controller/MemberController.java b/src/main/java/com/github/floriangubler/controller/MemberController.java
new file mode 100644
index 0000000..332c299
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/controller/MemberController.java
@@ -0,0 +1,94 @@
+package com.github.floriangubler.controller;
+
+import com.github.floriangubler.exception.BookingNotFoundException;
+import com.github.floriangubler.exception.UserNotFoundException;
+import com.github.floriangubler.model.BookingEntity;
+import com.github.floriangubler.model.BookingStatus;
+import com.github.floriangubler.model.MemberEntity;
+import com.github.floriangubler.service.BookingService;
+import com.github.floriangubler.service.MemberService;
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.security.SecurityRequirement;
+import io.swagger.v3.oas.annotations.tags.Tag;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+@RestController
+@RequestMapping("/api/members")
+@Tag(name = "Members", description = "Coworkspace Members management endpoints")
+public class MemberController {
+
+    private final MemberService memberService;
+    private final static String ADMINROLE = "ROLE_ADMIN";
+
+    MemberController(MemberService memberService) {
+        this.memberService = memberService;
+    }
+
+    @Operation(
+            summary = "Get Members",
+            description = "Get all Members (Only Admin)",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @GetMapping("/")
+    @PreAuthorize("hasRole(ADMINROLE)")
+    List<MemberEntity> loadUserBookings() {
+        return memberService.getMembers();
+    }
+
+    @Operation(
+            summary = "Update a Member",
+            description = "Admin updates a Member",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PutMapping("/{memberid}")
+    @PreAuthorize("hasRole(ADMINROLE)")
+    ResponseEntity<Void> updatemember (
+            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Member Update", required = true)
+            @RequestBody(required = true)
+            MemberEntity member,
+            @Parameter(description = "MemberID", required = true)
+            @RequestParam(name="memberid", required = true)
+            UUID memberid) {
+        try{
+            memberService.update(member, memberid);
+        } catch(UserNotFoundException e){
+            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+        }
+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
+    }
+
+    @Operation(
+            summary = "Delete a Member",
+            description = "Delete a Member (Only Admin)",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PostMapping("/")
+    @PreAuthorize("hasRole(ADMINROLE)")
+    ResponseEntity<Void> deletemember(
+            @Parameter(description = "MemberID", required = true)
+            @RequestParam(name = "memberid", required = true)
+            UUID memberid) {
+            try{
+                memberService.delete(memberid);
+                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
+            } catch(UserNotFoundException e){
+                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+            }
+    }
+
+    //Get Roles as String Set
+    private Set<String> getRolesSet(Authentication authentication){
+        return authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/repository/MemberRepository.java b/src/main/java/com/github/floriangubler/repository/MemberRepository.java
index 2757744..7df8c4c 100644
--- a/src/main/java/com/github/floriangubler/repository/MemberRepository.java
+++ b/src/main/java/com/github/floriangubler/repository/MemberRepository.java
@@ -1,13 +1,17 @@
 package com.github.floriangubler.repository;
 
+import com.github.floriangubler.model.BookingEntity;
 import com.github.floriangubler.model.MemberEntity;
 import org.springframework.data.repository.CrudRepository;
 
+import java.util.List;
 import java.util.Optional;
 import java.util.UUID;
 
 public interface MemberRepository extends CrudRepository<MemberEntity, UUID> {
+    List<MemberEntity> findAll();
 
     Optional<MemberEntity> findByEmail(String username);
 
+    void deleteById(UUID memberid);
 }
diff --git a/src/main/java/com/github/floriangubler/service/BookingService.java b/src/main/java/com/github/floriangubler/service/BookingService.java
index 5aff879..6b7f064 100644
--- a/src/main/java/com/github/floriangubler/service/BookingService.java
+++ b/src/main/java/com/github/floriangubler/service/BookingService.java
@@ -2,7 +2,6 @@ package com.github.floriangubler.service;
 
 import com.github.floriangubler.exception.BookingNotFoundException;
 import com.github.floriangubler.model.BookingEntity;
-import com.github.floriangubler.model.BookingStatus;
 import com.github.floriangubler.repository.BookingRepository;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.core.Authentication;
@@ -42,22 +41,18 @@ public class BookingService {
         return result;
     }
 
-    public Optional<BookingEntity> loadOne(UUID gameId) {
-        log.info("Executing find game with id " + gameId + " ...");
-        return repository.findById(gameId);
+    public BookingEntity create(BookingEntity booking) {
+        log.info("Executing create booking with id " + booking.getId() + " ...");
+        return repository.save(booking);
     }
 
-    public BookingEntity create(BookingEntity booking, BookingStatus status) {
-        log.info("Executing create game with id " + booking.getId() + " ...");
-        return repository.save(game);
-    }
-
-    public BookingEntity update(BookingEntity updatedGame, BookingEntity bookingid) {
-        if(repository.findById(updatedGame.getId()).isPresent()){
-            log.info("Executing update game with id " + updatedGame.getId() + " ...");
-            return repository.save(updatedGame);
+    public BookingEntity update(BookingEntity updatedBooking, UUID bookingid) {
+        if(repository.findById(bookingid).isPresent()){
+            log.info("Executing update booking with id " + bookingid + " ...");
+            updatedBooking.setId(bookingid);
+            return repository.save(updatedBooking);
         } else{
-            throw new IllegalArgumentException("Object with given id not found");
+            throw new BookingNotFoundException("Booking with given id not found");
         }
     }
 
diff --git a/src/main/java/com/github/floriangubler/service/MemberService.java b/src/main/java/com/github/floriangubler/service/MemberService.java
new file mode 100644
index 0000000..2f9a9ed
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/service/MemberService.java
@@ -0,0 +1,53 @@
+package com.github.floriangubler.service;
+
+import com.github.floriangubler.exception.BookingNotFoundException;
+import com.github.floriangubler.exception.UserNotFoundException;
+import com.github.floriangubler.model.BookingEntity;
+import com.github.floriangubler.model.MemberEntity;
+import com.github.floriangubler.repository.BookingRepository;
+import com.github.floriangubler.repository.MemberRepository;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+@Service
+@Slf4j
+public class MemberService {
+
+    private final MemberRepository repository;
+
+    MemberService(MemberRepository repository) {
+        this.repository = repository;
+    }
+
+    public List<MemberEntity> getMembers(){
+        log.info("Executing find all Members ...");
+        return repository.findAll();
+    }
+
+    public MemberEntity update(MemberEntity member, UUID memberid){
+        if(repository.findById(memberid).isPresent()){
+            log.info("Executing update user with id " + memberid + " ...");
+            member.setId(memberid);
+            return repository.save(member);
+        } else{
+            throw new UserNotFoundException("Member with given id not found");
+        }
+    }
+
+    public void delete(UUID memberid){
+        if(repository.findById(memberid).isPresent()){
+            log.info("Executing delete user with id " + memberid + " ...");
+            repository.deleteById(memberid);
+        } else{
+            throw new UserNotFoundException("Member with given id not found");
+        }
+    }
+
+}

commit 0cc80d8b63b1a39c11463e7ba53acca86ea73636
Author: Florian Gubler <gubler.florian@gmx.net>
Date:   Tue Sep 20 15:46:42 2022 +0200

    Init

diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..f433b1a
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..f430db6
--- /dev/null
+++ b/README.md
@@ -0,0 +1,3 @@
+# spring-boot-crud-example
+
+API documentation: http://localhost:8080/swagger-ui/index.html
\ No newline at end of file
diff --git a/docs/1_AnforderungenAnalysieren.docx b/docs/1_AnforderungenAnalysieren.docx
new file mode 100644
index 0000000..b214b01
--- /dev/null
+++ b/docs/1_AnforderungenAnalysieren.docx
@@ -0,0 +1,37 @@
+   Anforderungen analysieren
+ Erweiterte Anforderungen
+  Funktional
+  Nicht-Funktional
+  Als Mitglied kann ich alle Buchungen anonymisiert ansehen. 
+  Die Datenbank wird automatisch erstellt und bei jedem Start werden allfällige Änderungen ausgeführt. 
+  Als Administrator kann ich alle Buchungen ansehen (nicht anonymisiert)
+  Es wird ein Refresh Token erstellt, der 2 Wochen gültig ist, mit dem man neue Tokens generieren kann.
+  Als Administrator kann ich alle Buchungsanfragen ausgeben lassen (nicht anonymisiert)
+  Das Passwort muss in der Datenbank gehasht gespeichert werden. 
+ Personas
+   
+Name: Siras Sangapilai (Mitglied)
+Alter: 21
+Geschlecht: weiblich
+Beruf: Kauffrau
+Anwendung: Siras arbeitet in einem Kleinunternehmen, welches kein eigenes Büro besitzt. Deshalb nutzt ihre Firma das Coworking Space Angebot für ihre Mitarbeitenden. 
+
+
+   
+Name: Sarah Müller (Mitglied)
+Alter: 24
+Geschlecht: weiblich
+Beruf: HR
+Anwendung: Sarah arbeitet in einem grossen Unternehmen, welches ein eigenes Grossraumbüro besitzt. Dies ist ihr allerdings zu laut und ungeeignet für ihren Workflow, weshalb sie sich entschieden hat, ein Coworking Space Angebot zu nutzen. 
+   
+
+
+Name: André Chabulani (Admin
+Alter: 43
+Geschlecht: männlich
+Beruf: IT-Administrator
+Anwendung: André arbeitet bei der Firma, die Coworking Spaces anbietet. Damit alles korrekt verläuft und die Buchungen richtig verwaltet werden, schaut er, dass keine Konflikte entstehen und unterstützt die Kunden bei Problemen. 
+
+ Anwendungsfalldiagramm
+   In Projektordner /docs/charts/usecase.plantuml
+
diff --git a/docs/2_PersistenzschichtPlanen.docx b/docs/2_PersistenzschichtPlanen.docx
new file mode 100644
index 0000000..e69de29
diff --git a/docs/3_Schnittstellenplanung.docx b/docs/3_Schnittstellenplanung.docx
new file mode 100644
index 0000000..e69de29
diff --git a/docs/DokumentationFlorianGubler_19092022.docx b/docs/DokumentationFlorianGubler_19092022.docx
new file mode 100644
index 0000000..0d683d0
--- /dev/null
+++ b/docs/DokumentationFlorianGubler_19092022.docx
@@ -0,0 +1,140 @@
+M223 Projektdokumentation
+   Anforderungen analysieren
+ Erweiterte Anforderungen
+  Funktional
+  Nicht-Funktional
+  Als Mitglied kann ich alle Buchungen anonymisiert ansehen. 
+  Die Datenbank wird automatisch erstellt und bei jedem Start werden allfällige Änderungen ausgeführt. 
+  Als Administrator kann ich alle Buchungen ansehen (nicht anonymisiert)
+  Es wird ein Refresh Token erstellt, der 2 Wochen gültig ist, mit dem man neue Tokens generieren kann.
+  Als Administrator kann ich alle Buchungsanfragen ausgeben lassen (nicht anonymisiert)
+  Das Passwort muss in der Datenbank gehasht gespeichert werden. 
+ Personas
+   
+Name: Siras Sangapilai (Mitglied)
+Alter: 21
+Geschlecht: weiblich
+Beruf: Kauffrau
+Anwendung: Siras arbeitet in einem Kleinunternehmen, welches kein eigenes Büro besitzt. Deshalb nutzt ihre Firma das Coworking Space Angebot für ihre Mitarbeitenden. 
+
+
+   
+Name: Sarah Müller (Mitglied)
+Alter: 24
+Geschlecht: weiblich
+Beruf: HR
+Anwendung: Sarah arbeitet in einem grossen Unternehmen, welches ein eigenes Grossraumbüro besitzt. Dies ist ihr allerdings zu laut und ungeeignet für ihren Workflow, weshalb sie sich entschieden hat, ein Coworking Space Angebot zu nutzen. 
+   
+
+
+Name: André Chabulani (Admin
+Alter: 43
+Geschlecht: männlich
+Beruf: IT-Administrator
+Anwendung: André arbeitet bei der Firma, die Coworking Spaces anbietet. Damit alles korrekt verläuft und die Buchungen richtig verwaltet werden, schaut er, dass keine Konflikte entstehen und unterstützt die Kunden bei Problemen. 
+
+ Anwendungsfalldiagramm
+   In Projektordner /docs/charts/usecase.plantuml
+ Persistenz Schicht planen
+ Fachklassendiagramm
+In Projektordner /docs/charts/usecase.plantuml
+ Schnittstellenplanung
+ Schnittstellen planen
+Methode
+Endpoint
+Security
+Beschreibung
+Request Payload (JSON)
+Responses
+POST
+/api/members/register
+OPEN
+Ein Gast sendet eine E-Mail, Vor- und Nachname, sowie ein Passwort um sich als neuen User zu registrieren. 
+E-Mail, Vorname, Nachname und Passwort
+201  -  CREATED
+User erstellt
+409  -  CONFLICT
+User existiert bereits (E-Mail ist Unique)
+POST
+/api/members/login
+OPEN
+Ein Gast meldet sich mittels E-Mail / Passwort an und erhält einen JWT-Token, sowie einen Refresh Token
+E-Mail & Passwort
+200  -  OK
+Login erfolgreich
+401  -  UNAUTHORIZIZED
+Ungültige Anmeldedaten
+GET
+/api/bookings/{onlymy}
+MITGLIED / ADMIN
+Alle Buchungen ansehen (Für MITGLIED anonymisiert) oder nur eigene Buchungen ansehen (onlymy Parameter)
+-
+200  -  OK
+Erfolgreich (Buchungsliste)
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token
+DELETE
+/api/bookings/{bookingid}
+MITGLIED / ADMIN
+Storniert / löscht eine bestimmte Buchung. Mitglieder können nur eigene Buchungen löschen, Admins alle.
+-
+204  -  NO CONTENT
+Erfolgreich 
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token
+404  -  NOT FOUND
+Buchung nicht gefunden
+POST
+/api/bookings
+MITGLIED / ADMIN
+Erstellt eine neue Buchungsanfrage oder für einen Admin direkt eine Buchung.
+Booking Objekt
+200  -  OK
+Erfolgreich (Booking)
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token
+PUT
+/api/bookings/{bookingid}
+ADMIN
+Verändert eine bestehende Buchung.
+Booking Objekt
+200  -  OK
+Erfolgreich (Booking) 
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+404  -  NOT FOUND
+Buchung nicht gefunden
+GET
+/api/members
+ADMIN
+Gibt alle registrierten Benutzer zurück.
+-
+200  -  OK
+Erfolgreich (Userliste)
+401  - UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+PUT
+/api/members/{memberid}
+ADMIN
+Bearbeitet einen bereits existierenden Member. 
+Member Objekt
+200  -  OK
+Erfolgreich (User)
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+404  -  NOT FOUND
+Member nicht gefunden
+DELETE
+/api/members/{memberid}
+ADMIN
+Löscht einen bereits existierenden Benutzer
+-
+204  -  NO CONTENT
+Erfolgreich 
+401  -  UNAUTHORIZIZED
+Ungültiger JWT-Token oder keine Admin Rechte
+404  -  NOT FOUND
+Member nicht gefunden
+
+ Sequenzdiagramm
+In Projektordner /docs/charts/sequence_cancelbook.plantuml
diff --git a/docs/charts/classes.plantuml b/docs/charts/classes.plantuml
new file mode 100644
index 0000000..9072009
--- /dev/null
+++ b/docs/charts/classes.plantuml
@@ -0,0 +1,29 @@
+@startuml
+class Booking{
+    UUID id
+    Member user
+    Date date
+    BookingTime time
+    BookingStatus status
+}
+class Member{
+    UUID id
+    String email
+    String firstname
+    String lastname
+    String password
+}
+enum BookingStatus{
+    OPEN
+    APPROVED
+    DECLINED
+}
+enum BookingTime{
+    MORNING
+    AFTERNOON
+    DAY
+}
+Booking *-- Member
+Booking *-- BookingStatus
+Booking *-- BookingTime
+@enduml
\ No newline at end of file
diff --git a/docs/charts/sequence_cancelbook.puml b/docs/charts/sequence_cancelbook.puml
new file mode 100644
index 0000000..f1f81ca
--- /dev/null
+++ b/docs/charts/sequence_cancelbook.puml
@@ -0,0 +1,18 @@
+@startuml
+Client -> Server: Request with JWT: /api/booking/cancel/{bookingid}
+Server -> Server: Verify JWT Authentication
+alt JWT verified
+    Server -> Datenbank: findbyId(bookingid)
+    Datenbank --> Server: Return Booking
+    alt Booking found
+        Server -> Server: Set Bookingstatus\n to CANCELED
+        Server -> Datenbank: Save Updated Booking
+        Datenbank --> Server: Update Sucessfull
+        Server --> Client: 200 OK
+    else Booking not found
+        Server --> Client: 404 NOT FOUND
+    end
+else JWT invalid
+    Server -> Client: 401 - UNAUTHORIZIZED
+end
+@enduml
\ No newline at end of file
diff --git a/docs/charts/usecase.plantuml b/docs/charts/usecase.plantuml
new file mode 100644
index 0000000..9014d8a
--- /dev/null
+++ b/docs/charts/usecase.plantuml
@@ -0,0 +1,23 @@
+@startuml
+left to right direction
+actor Gast
+actor Mitglied
+actor Administrator
+rectangle "Coworkspace API"{
+    Gast --> (Registrieren)
+    Gast --> (Login)
+
+    Mitglied --> (Buchung erstellen)
+    Mitglied --> (Eigene Buchungen überprüfen)
+    Mitglied --> (Alle Buchungen ansehen) : ANONYM
+    Mitglied --> (Buchung stornieren)
+
+    (Alle Buchungen ansehen) <-- Administrator : NICHT ANONYM
+    (Mitglieder verwalten) <-- Administrator
+    (Buchungen verwalten) <-- Administrator
+    (Buchungsanfragen ansehen) <-- Administrator
+    (Buchungsanfragen bearbeiten) <-- Administrator
+
+    (Buchung erstellen) .> (Buchungsanfragen bearbeiten) :include
+}
+@enduml
\ No newline at end of file
diff --git a/http-requests/client-requests.rest b/http-requests/client-requests.rest
new file mode 100644
index 0000000..e4f074c
--- /dev/null
+++ b/http-requests/client-requests.rest
@@ -0,0 +1,38 @@
+// Get all games
+GET http://localhost:8080/games
+Authorization: Bearer {{jwt}}
+
+###
+
+// Get one specific game
+GET http://localhost:8080/games/413e2297-b84b-42ef-97ed-16a8a9d1d671
+Authorization: Bearer {{jwt}}
+
+###
+
+// Create a new game
+POST http://localhost:8080/games/
+Authorization: Bearer {{jwt}}
+Content-Type: application/json
+
+{
+  "name": "World of Warcraft",
+  "categoryId": "e1eec954-6ef4-4926-8183-7575af189f2a"
+}
+
+###
+
+// Update one specific game
+PUT http://localhost:8080/games/413e2297-b84b-42ef-97ed-16a8a9d1d671
+Authorization: Bearer {{jwt}}
+
+{
+  "name": "World of Warcraft 2",
+  "categoryId": "e1eec954-6ef4-4926-8183-7575af189f2a"
+}
+
+###
+
+// Delete one specific and existing game
+DELETE http://localhost:8080/games/413e2297-b84b-42ef-97ed-16a8a9d1d671
+Authorization: Bearer {{jwt}}
diff --git a/http-requests/http-client.env.json b/http-requests/http-client.env.json
new file mode 100644
index 0000000..5abdec1
--- /dev/null
+++ b/http-requests/http-client.env.json
@@ -0,0 +1,11 @@
+{
+  "admin": {
+    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiODQxMzE0N2ItNTNjNy00YzIyLWE0OTctODk5M2VlMjdmZjAyIiwic2NvcGUiOltdLCJuYW1lIjoibmlrb2xhQHN0YW5rb3ZpYy54eXoiLCJ0eXAiOiJCZWFyZXIiLCJleHAiOjE2NjM2NTgyNjMsImlhdCI6MTY2MzU3MTg2MywianRpIjoiN2Y2MGEyNTMtNDliZS00YWUzLTlkNzUtMzEyZWRmN2RjZTZmIn0.0MixN8XZkSilbuNl2SLPfRA25sxS9K1rFAQQ3iavSGVbItk4ewMEkmofgT1pipwAtXx8XsKclmt4eT25b-ddjw"
+  },
+  "member": {
+    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0IiwiaWF0IjoxNjYzMTQ4Njc0LCJleHAiOjE2NjMzNDg2NzQsImlzcyI6Imh0dHBzOi8vYXBpLmFsZWV2YS5pby9hdXRoIiwidHlwIjoiQmVhcmVyIn0.WFs8NcPeqdLf89unjx1cqPa5U0XYN6ecrDt6X2l1tCsdWNtUDxG5T6TeMMvumbqwZ9C0Z_djhYGdyHBzeKzCbg\n"
+  },
+  "user": {
+    "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoiOTEzNWYxMmUtMWI2Ni00ZWU2LWJiYWUtZGYzNzMwM2NjMTU0IiwiaWF0IjoxNjYzMTQ4Njc0LCJleHAiOjE2NjMzNDg2NzQsImlzcyI6Imh0dHBzOi8vYXBpLmFsZWV2YS5pby9hdXRoIiwidHlwIjoiQmVhcmVyIn0.WFs8NcPeqdLf89unjx1cqPa5U0XYN6ecrDt6X2l1tCsdWNtUDxG5T6TeMMvumbqwZ9C0Z_djhYGdyHBzeKzCbg\n"
+  }
+}
\ No newline at end of file
diff --git a/mvnw b/mvnw
new file mode 100644
index 0000000..8a8fb22
--- /dev/null
+++ b/mvnw
@@ -0,0 +1,316 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Maven Start Up Batch script
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   M2_HOME - location of maven2's installed home dir
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /usr/local/etc/mavenrc ] ; then
+    . /usr/local/etc/mavenrc
+  fi
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "`uname`" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        export JAVA_HOME="`/usr/libexec/java_home`"
+      else
+        export JAVA_HOME="/Library/Java/Home"
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=`java-config --jre-home`
+  fi
+fi
+
+if [ -z "$M2_HOME" ] ; then
+  ## resolve links - $0 may be a link to maven's home
+  PRG="$0"
+
+  # need this for relative symlinks
+  while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+      PRG="$link"
+    else
+      PRG="`dirname "$PRG"`/$link"
+    fi
+  done
+
+  saveddir=`pwd`
+
+  M2_HOME=`dirname "$PRG"`/..
+
+  # make it fully qualified
+  M2_HOME=`cd "$M2_HOME" && pwd`
+
+  cd "$saveddir"
+  # echo Using m2 at $M2_HOME
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --unix "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME="`(cd "$M2_HOME"; pwd)`"
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="`which javac`"
+  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=`which readlink`
+    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
+      if $darwin ; then
+        javaHome="`dirname \"$javaExecutable\"`"
+        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
+      else
+        javaExecutable="`readlink -f \"$javaExecutable\"`"
+      fi
+      javaHome="`dirname \"$javaExecutable\"`"
+      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="`\\unset -f command; \\command -v java`"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=`cd "$wdir/.."; pwd`
+    fi
+    # end of workaround
+  done
+  echo "${basedir}"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    echo "$(tr -s '\n' ' ' < "$1")"
+  fi
+}
+
+BASE_DIR=`find_maven_basedir "$(pwd)"`
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Found .mvn/wrapper/maven-wrapper.jar"
+    fi
+else
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
+    fi
+    if [ -n "$MVNW_REPOURL" ]; then
+      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+    else
+      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+    fi
+    while IFS="=" read key value; do
+      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
+      esac
+    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Downloading from: $jarUrl"
+    fi
+    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
+    if $cygwin; then
+      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
+    fi
+
+    if command -v wget > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found wget ... using wget"
+        fi
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        else
+            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        fi
+    elif command -v curl > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found curl ... using curl"
+        fi
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            curl -o "$wrapperJarPath" "$jarUrl" -f
+        else
+            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
+        fi
+
+    else
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Falling back to using Java to download"
+        fi
+        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        # For Cygwin, switch paths to Windows format before running javac
+        if $cygwin; then
+          javaClass=`cygpath --path --windows "$javaClass"`
+        fi
+        if [ -e "$javaClass" ]; then
+            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Compiling MavenWrapperDownloader.java ..."
+                fi
+                # Compiling the Java class
+                ("$JAVA_HOME/bin/javac" "$javaClass")
+            fi
+            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                # Running the downloader
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Running MavenWrapperDownloader.java ..."
+                fi
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
+if [ "$MVNW_VERBOSE" = true ]; then
+  echo $MAVEN_PROJECTBASEDIR
+fi
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --path --windows "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
+fi
+
+# Provide a "standardized" way to retrieve the CLI args that will
+# work with both Windows and non-Windows executions.
+MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
+export MAVEN_CMD_LINE_ARGS
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  $MAVEN_DEBUG_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.home=${M2_HOME}" \
+  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
index 0000000..1d8ab01
--- /dev/null
+++ b/mvnw.cmd
@@ -0,0 +1,188 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Maven Start Up Batch script
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM M2_HOME - location of maven2's installed home dir
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
+if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Found %WRAPPER_JAR%
+    )
+) else (
+    if not "%MVNW_REPOURL%" == "" (
+        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+    )
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Couldn't find %WRAPPER_JAR%, downloading it ...
+        echo Downloading from: %DOWNLOAD_URL%
+    )
+
+    powershell -Command "&{"^
+		"$webclient = new-object System.Net.WebClient;"^
+		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
+		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
+		"}"^
+		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
+		"}"
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Finished downloading %WRAPPER_JAR%
+    )
+)
+@REM End of extension
+
+@REM Provide a "standardized" way to retrieve the CLI args that will
+@REM work with both Windows and non-Windows executions.
+set MAVEN_CMD_LINE_ARGS=%*
+
+%MAVEN_JAVA_EXE% ^
+  %JVM_CONFIG_MAVEN_PROPS% ^
+  %MAVEN_OPTS% ^
+  %MAVEN_DEBUG_OPTS% ^
+  -classpath %WRAPPER_JAR% ^
+  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
+  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
+if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%"=="on" pause
+
+if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
+
+cmd /C exit /B %ERROR_CODE%
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..4df7c72
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>2.7.3</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+
+	<groupId>com.github.floriangubler</groupId>
+	<artifactId>coworkspace-manager</artifactId>
+	<version>1.0.0</version>
+	<name>coworkspace-manager</name>
+	<description>M223 Coworkspace Abschlussprojekt</description>
+
+	<properties>
+		<java.version>17</java.version>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+	</properties>
+
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.h2database</groupId>
+			<artifactId>h2</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-security</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.auth0</groupId>
+			<artifactId>java-jwt</artifactId>
+			<version>4.0.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springdoc</groupId>
+			<artifactId>springdoc-openapi-ui</artifactId>
+			<version>1.6.11</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-devtools</artifactId>
+			<scope>runtime</scope>
+			<optional>true</optional>
+		</dependency>
+
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
diff --git a/src/main/java/com/github/floriangubler/CoworkspaceManagerApplication.java b/src/main/java/com/github/floriangubler/CoworkspaceManagerApplication.java
new file mode 100644
index 0000000..63b1392
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/CoworkspaceManagerApplication.java
@@ -0,0 +1,13 @@
+package com.github.floriangubler;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class CoworkspaceManagerApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(CoworkspaceManagerApplication.class, args);
+    }
+
+}
diff --git a/src/main/java/com/github/floriangubler/configuration/OpenApiConfig.java b/src/main/java/com/github/floriangubler/configuration/OpenApiConfig.java
new file mode 100644
index 0000000..757c4fb
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/configuration/OpenApiConfig.java
@@ -0,0 +1,35 @@
+package com.github.floriangubler.configuration;
+
+import io.swagger.v3.oas.models.Components;
+import io.swagger.v3.oas.models.OpenAPI;
+import io.swagger.v3.oas.models.info.Info;
+import io.swagger.v3.oas.models.security.SecurityScheme;
+import org.springdoc.core.GroupedOpenApi;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class OpenApiConfig {
+
+    @Bean
+    public GroupedOpenApi publicApi() {
+        return GroupedOpenApi.builder()
+                .packagesToScan("com.github.floriangubler.controller")
+                .group("coworkspace-api")
+                .build();
+    }
+
+    @Bean
+    public OpenAPI openAPI() {
+        return new OpenAPI()
+                .info(new Info().title("COWORKSPACE API").version("v1.0.0"))
+                .components(new Components()
+                        .addSecuritySchemes("JWT Auth", new SecurityScheme()
+                                .name("Authorization")
+                                .type(SecurityScheme.Type.APIKEY)
+                                .in(SecurityScheme.In.HEADER)
+                                .scheme("apikey")
+                        )
+                );
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/configuration/SecurityConfig.java b/src/main/java/com/github/floriangubler/configuration/SecurityConfig.java
new file mode 100644
index 0000000..529d25c
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/configuration/SecurityConfig.java
@@ -0,0 +1,50 @@
+package com.github.floriangubler.configuration;
+
+import com.github.floriangubler.security.JwtAuthenticationEntryPoint;
+import com.github.floriangubler.security.JwtAuthenticationFilter;
+import com.github.floriangubler.security.JwtServiceHMAC;
+import com.github.floriangubler.repository.MemberRepository;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+
+@Configuration
+@EnableWebSecurity
+@EnableGlobalMethodSecurity(prePostEnabled = true)
+public class SecurityConfig {
+
+    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
+    private final JwtServiceHMAC jwtService;
+    private final MemberRepository memberRepository;
+
+    public SecurityConfig(JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint, JwtServiceHMAC jwtService, MemberRepository memberRepository) {
+        this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;
+        this.jwtService = jwtService;
+        this.memberRepository = memberRepository;
+    }
+
+    @Bean
+    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
+        return http.csrf().disable()
+                .authorizeRequests()
+                .antMatchers("/auth/**", "/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**", "/h2-console/**", "/console/**").permitAll()
+                .antMatchers(HttpMethod.OPTIONS).permitAll()
+                .anyRequest().authenticated()
+                .and()
+                .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)
+                .and()
+                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+                .and()
+                .addFilterBefore(new JwtAuthenticationFilter(jwtService, memberRepository), UsernamePasswordAuthenticationFilter.class)
+                .headers().frameOptions().disable()
+                .and()
+                .build();
+    }
+
+}
diff --git a/src/main/java/com/github/floriangubler/controller/AuthController.java b/src/main/java/com/github/floriangubler/controller/AuthController.java
new file mode 100644
index 0000000..3a42429
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/controller/AuthController.java
@@ -0,0 +1,135 @@
+package com.github.floriangubler.controller;
+
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.media.Schema;
+import com.github.floriangubler.model.MemberEntity;
+import com.github.floriangubler.model.TokenResponse;
+import com.github.floriangubler.repository.MemberRepository;
+import com.github.floriangubler.security.JwtServiceHMAC;
+import lombok.val;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.crypto.bcrypt.BCrypt;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.io.IOException;
+import java.security.GeneralSecurityException;
+import java.time.LocalDateTime;
+import java.time.ZoneOffset;
+import java.util.ArrayList;
+import java.util.UUID;
+
+@RestController
+@RequestMapping("/auth")
+public class AuthController {
+
+    @Autowired
+    private JwtServiceHMAC jwtService;
+
+    @Autowired
+    private MemberRepository memberRepository;
+
+    @Operation(
+            summary = "Get new token",
+            operationId = "getToken",
+            tags = {"Authorization"}
+    )
+    @PostMapping(value = "/token", produces = "application/json")
+    public TokenResponse getToken(
+            @Parameter(
+                    description = "The grant type which will be used to get an new token",
+                    required = true,
+                    schema = @Schema(allowableValues = {"password", "refresh_token"})
+            )
+            @RequestParam(name = "grant_type", required = true)
+            String grantType,
+            @Parameter(description = "If refresh_token is selected as grant type this field is needed")
+            @RequestParam(name = "refresh_token", required = false)
+            String refreshToken,
+            @Parameter(description = "If password is selected as grant type this field is needed", required = false)
+            @RequestParam(name = "email", required = false)
+            String email,
+            @Parameter(description = "If password is selected as grant type this field is needed", required = false)
+            @RequestParam(name = "password", required = false)
+            String password) throws GeneralSecurityException, IOException {
+
+        switch (grantType) {
+            case "password" -> {
+                val optionalMember = memberRepository.findByEmail(email);
+                if (optionalMember.isEmpty()) {
+                    throw new IllegalArgumentException("Username or password wrong");
+                }
+
+                if (!BCrypt.checkpw(password, optionalMember.get().getPasswordHash())) {
+                    throw new IllegalArgumentException("Username or password wrong");
+                }
+
+                val member = optionalMember.get();
+
+                val id = UUID.randomUUID().toString();
+                val scopes = new ArrayList<String>();
+
+                if (member.getIsAdmin()) {
+                    scopes.add("ADMIN");
+                }
+
+                val newAccessToken = jwtService.createNewJWT(id, member.getId().toString(), member.getEmail(), scopes);
+                val newRefreshToken = jwtService.createNewJWTRefresh(id, member.getId().toString());
+
+                return new TokenResponse(newAccessToken, newRefreshToken, "Bearer", LocalDateTime.now().plusDays(14).toEpochSecond(ZoneOffset.UTC), LocalDateTime.now().plusDays(1).toEpochSecond(ZoneOffset.UTC));
+            }
+            case "refresh_token" -> {
+                val jwt = jwtService.verifyJwt(refreshToken, false);
+
+                val optionalMember = memberRepository.findById(UUID.fromString(jwt.getClaim("user_id").asString()));
+                if (optionalMember.isEmpty()) {
+                    throw new IllegalArgumentException("Invalid refresh token");
+                }
+
+                val member = optionalMember.get();
+
+                val id = UUID.randomUUID().toString();
+                val scopes = new ArrayList<String>();
+
+                if (member.getIsAdmin()) {
+                    scopes.add("ADMIN");
+                }
+
+                val newAccessToken = jwtService.createNewJWT(id, member.getId().toString(), member.getEmail(), scopes);
+                val newRefreshToken = jwtService.createNewJWTRefresh(id, member.getId().toString());
+
+                return new TokenResponse(newAccessToken, newRefreshToken, "Bearer", LocalDateTime.now().plusDays(14).toEpochSecond(ZoneOffset.UTC), LocalDateTime.now().plusDays(1).toEpochSecond(ZoneOffset.UTC));
+            }
+            default -> throw new IllegalArgumentException("Not supported grant type: " + grantType);
+        }
+    }
+
+    @Operation(
+            summary = "Register user",
+            operationId = "register",
+            tags = {"Authorization"}
+    )
+    @PostMapping(value = "/register", produces = "application/json")
+    public TokenResponse register(
+            @Parameter(description = "Username / E-Mail", required = true)
+            @RequestParam(name = "email", required = true)
+            String email,
+            @Parameter(description = "Vorname", required = true)
+            @RequestParam(name = "firstname", required = true)
+            String firstname,
+            @Parameter(description = "Nachname", required = true)
+            @RequestParam(name = "lastname", required = true)
+            String lastname,
+            @Parameter(description = "Password", required = true)
+            @RequestParam(name = "password", required = true)
+            String password
+    ) throws GeneralSecurityException, IOException {
+        String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt());
+        val newMember = new MemberEntity(UUID.randomUUID(), email, firstname, lastname, passwordHash, false);
+        memberRepository.save(newMember);
+        return getToken("password", "", email, password);
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/controller/BookingController.java b/src/main/java/com/github/floriangubler/controller/BookingController.java
new file mode 100644
index 0000000..af6bc15
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/controller/BookingController.java
@@ -0,0 +1,152 @@
+package com.github.floriangubler.controller;
+
+import com.github.floriangubler.exception.BookingNotFoundException;
+import com.github.floriangubler.model.BookingEntity;
+import com.github.floriangubler.model.BookingStatus;
+import com.github.floriangubler.service.BookingService;
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.security.SecurityRequirement;
+import io.swagger.v3.oas.annotations.tags.Tag;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+@RestController
+@RequestMapping("/api/bookings")
+@Tag(name = "Booking", description = "Coworkspace Booking management endpoints")
+public class BookingController {
+
+    private final BookingService bookingService;
+    private final String ADMINROLE = "ROLE_ADMIN";
+
+    BookingController(BookingService bookingService) {
+        this.bookingService = bookingService;
+    }
+
+    @Operation(
+            summary = "Get bookings",
+            description = "Get all bookings (for users anonymised) or only bookings of logged-in User",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @GetMapping("/{onlymy}")
+    List<BookingEntity> loadUserBookings(
+            @Parameter(description = "Onlymy", required = false)
+            @RequestParam(name = "onlymy", required = false)
+            Boolean onlymy,
+            Authentication authentication) {
+        UUID userid = UUID.fromString(authentication.getName());
+        Set<String> userroles = authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet());
+        if(onlymy != null && onlymy){
+            return bookingService.findUserBookings(userid);
+        } else{
+            return bookingService.findBookings(!userroles.contains(ADMINROLE));
+        }
+    }
+
+    @Operation(
+            summary = "Delete a booking",
+            description = "User delete own bookings, admins delete any booking",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @DeleteMapping("/{bookingid}")
+    ResponseEntity<Void> deletebooking(
+            @Parameter(description = "BookingID", required = true)
+            @RequestParam(name = "bookingid", required = true)
+            UUID bookingid,
+            Authentication authentication) {try{
+            bookingService.delete(bookingid, authentication);
+        } catch(BookingNotFoundException e){
+            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+        }
+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
+    }
+
+    @Operation(
+            summary = "Create a booking",
+            description = "Create a new Booking (for users with status OPENED, for Admins status ACCEPTED)",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PostMapping("/")
+    BookingEntity createbooking(
+            @Parameter(description = "BookingID", required = true)
+            @RequestBody(required = true)
+            BookingEntity booking,
+            Authentication authentication) {
+        BookingStatus status = BookingStatus.ORDERED;
+        if(getRolesSet(authentication).contains(ADMINROLE)){
+            status = BookingStatus.APPROVED;
+        }
+        return bookingService.create(booking, status);
+    }
+
+    @Operation(
+            summary = "",
+            description = "",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PutMapping("/{bookingid}")
+    BookingEntity updatebooking(
+            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Booking Update", required = true)
+            @RequestBody(required = true)
+            BookingEntity booking,
+            @RequestParam(name="bookingid", required = true)
+            BookingEntity bookingid,
+            Authentication authentication) {
+        return bookingService.update(booking, bookingid);
+    }
+
+    @Operation(
+            summary = "",
+            description = "",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PostMapping("/")
+    ResponseEntity<BookingEntity> test(
+            @Parameter(description = "BookingID", required = true)
+            @RequestParam(name = "bookingid", required = true)
+            BookingEntity bookingid,
+            Authentication authentication) {
+        return null;
+    }
+
+    @Operation(
+            summary = "",
+            description = "",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PostMapping("/")
+    ResponseEntity<BookingEntity> test(
+            @Parameter(description = "BookingID", required = true)
+            @RequestParam(name = "bookingid", required = true)
+            BookingEntity bookingid,
+            Authentication authentication) {
+        return null;
+    }
+
+    @Operation(
+            summary = "",
+            description = "",
+            security = {@SecurityRequirement(name = "JWT Auth")}
+    )
+    @PostMapping("/")
+    ResponseEntity<BookingEntity> test(
+            @Parameter(description = "BookingID", required = true)
+            @RequestParam(name = "bookingid", required = true)
+            BookingEntity bookingid,
+            Authentication authentication) {
+        return null;
+    }
+
+    //Get Roles as String Set
+    private Set<String> getRolesSet(Authentication authentication){
+        return authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet());
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/exception/BookingNotFoundException.java b/src/main/java/com/github/floriangubler/exception/BookingNotFoundException.java
new file mode 100644
index 0000000..cebf154
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/exception/BookingNotFoundException.java
@@ -0,0 +1,7 @@
+package com.github.floriangubler.exception;
+
+public class BookingNotFoundException extends RuntimeException {
+    public BookingNotFoundException(String errorMessage) {
+        super(errorMessage);
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/exception/UserNotFoundException.java b/src/main/java/com/github/floriangubler/exception/UserNotFoundException.java
new file mode 100644
index 0000000..59098cb
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/exception/UserNotFoundException.java
@@ -0,0 +1,7 @@
+package com.github.floriangubler.exception;
+
+public class UserNotFoundException extends RuntimeException {
+    public UserNotFoundException(String errorMessage) {
+        super(errorMessage);
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/model/BookingEntity.java b/src/main/java/com/github/floriangubler/model/BookingEntity.java
new file mode 100644
index 0000000..25be324
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/model/BookingEntity.java
@@ -0,0 +1,60 @@
+package com.github.floriangubler.model;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.Setter;
+import lombok.ToString;
+import org.hibernate.Hibernate;
+import org.hibernate.annotations.GenericGenerator;
+import org.hibernate.annotations.Type;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.util.Date;
+import java.util.Objects;
+import java.util.UUID;
+
+@Getter
+@Setter
+@ToString
+@RequiredArgsConstructor
+@Entity(name = "BOOKING")
+public class BookingEntity implements Serializable {
+
+    @Id
+    @GeneratedValue(generator = "UUID")
+    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
+    @Column(name = "id", updatable = false, nullable = false)
+    @Type(type = "org.hibernate.type.UUIDCharType")
+    UUID id = UUID.randomUUID();
+
+    @ManyToOne
+    @JoinColumn(name = "member", nullable = false)
+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)
+    private MemberEntity member;
+
+    @Column(name = "date", nullable = false)
+    private Date date;
+
+    @Enumerated(EnumType.STRING)
+    @Column(name = "time", nullable = false)
+    private BookingTime time;
+
+    @Enumerated(EnumType.STRING)
+    @Column(name = "status", nullable = false)
+    private BookingStatus status;
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
+        BookingEntity bookingEntity = (BookingEntity) o;
+        return id != null && Objects.equals(id, bookingEntity.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return getClass().hashCode();
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/model/BookingStatus.java b/src/main/java/com/github/floriangubler/model/BookingStatus.java
new file mode 100644
index 0000000..88a213d
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/model/BookingStatus.java
@@ -0,0 +1,7 @@
+package com.github.floriangubler.model;
+
+public enum BookingStatus {
+    ORDERED,
+    APPROVED,
+    DECLINED;
+}
diff --git a/src/main/java/com/github/floriangubler/model/BookingTime.java b/src/main/java/com/github/floriangubler/model/BookingTime.java
new file mode 100644
index 0000000..6290e3e
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/model/BookingTime.java
@@ -0,0 +1,7 @@
+package com.github.floriangubler.model;
+
+public enum BookingTime {
+    MORNING,
+    AFTERNOON,
+    DAY;
+}
diff --git a/src/main/java/com/github/floriangubler/model/MemberEntity.java b/src/main/java/com/github/floriangubler/model/MemberEntity.java
new file mode 100644
index 0000000..4cc282c
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/model/MemberEntity.java
@@ -0,0 +1,60 @@
+package com.github.floriangubler.model;
+
+import lombok.*;
+import org.hibernate.Hibernate;
+import org.hibernate.annotations.GenericGenerator;
+import org.hibernate.annotations.Type;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import java.io.Serializable;
+import java.util.Objects;
+import java.util.UUID;
+
+@Getter
+@Setter
+@ToString
+@RequiredArgsConstructor
+@AllArgsConstructor
+@Entity(name = "MEMBER")
+public class MemberEntity implements Serializable {
+
+    @Id
+    @GeneratedValue(generator = "UUID")
+    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
+    @Column(name = "id", updatable = false, nullable = false)
+    @Type(type = "org.hibernate.type.UUIDCharType")
+    UUID id = UUID.randomUUID();
+
+    @Column(name = "email", nullable = false)
+    String email;
+
+    @Column(name = "firstname", nullable = false)
+    String firstname;
+
+    @Column(name = "lastname", nullable = false)
+    String lastname;
+
+    @Column(name = "password_hash", nullable = false)
+    String passwordHash;
+
+    @Column(name = "is_admin", nullable = false)
+    Boolean isAdmin = false;
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
+        MemberEntity that = (MemberEntity) o;
+        return id != null && Objects.equals(id, that.id) &&
+                email != null && Objects.equals(email, that.email) &&
+                passwordHash != null && Objects.equals(passwordHash, that.passwordHash);
+    }
+
+    @Override
+    public int hashCode() {
+        return getClass().hashCode();
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/model/TokenResponse.java b/src/main/java/com/github/floriangubler/model/TokenResponse.java
new file mode 100644
index 0000000..20a1e8d
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/model/TokenResponse.java
@@ -0,0 +1,28 @@
+package com.github.floriangubler.model;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+
+import java.time.Duration;
+
+@Data
+@AllArgsConstructor
+public class TokenResponse {
+
+    @JsonProperty("access_token")
+    String accessToken;
+
+    @JsonProperty("refresh_token")
+    String refreshToken;
+
+    @JsonProperty("token_type")
+    String tokenType;
+
+    @JsonProperty("refresh_expires_in")
+    Long refreshExpiresIn = Duration.ofDays(14).getSeconds();
+
+    @JsonProperty("expires_in")
+    Long expiresIn = Duration.ofDays(1).getSeconds();
+
+}
diff --git a/src/main/java/com/github/floriangubler/repository/BookingRepository.java b/src/main/java/com/github/floriangubler/repository/BookingRepository.java
new file mode 100644
index 0000000..d86d3f4
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/repository/BookingRepository.java
@@ -0,0 +1,17 @@
+package com.github.floriangubler.repository;
+
+import com.github.floriangubler.model.BookingEntity;
+import com.github.floriangubler.model.MemberEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+import java.util.List;
+import java.util.UUID;
+
+public interface BookingRepository extends JpaRepository<BookingEntity, UUID> {
+    List<BookingEntity> findAll();
+
+    //TODO
+    @Query("SELECT b from BOOKING b where b.member.id = :memberId")
+    List<BookingEntity> findAllByMemberId(UUID memberId);
+}
diff --git a/src/main/java/com/github/floriangubler/repository/MemberRepository.java b/src/main/java/com/github/floriangubler/repository/MemberRepository.java
new file mode 100644
index 0000000..2757744
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/repository/MemberRepository.java
@@ -0,0 +1,13 @@
+package com.github.floriangubler.repository;
+
+import com.github.floriangubler.model.MemberEntity;
+import org.springframework.data.repository.CrudRepository;
+
+import java.util.Optional;
+import java.util.UUID;
+
+public interface MemberRepository extends CrudRepository<MemberEntity, UUID> {
+
+    Optional<MemberEntity> findByEmail(String username);
+
+}
diff --git a/src/main/java/com/github/floriangubler/security/JwtAuthenticationEntryPoint.java b/src/main/java/com/github/floriangubler/security/JwtAuthenticationEntryPoint.java
new file mode 100644
index 0000000..93d62ee
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/security/JwtAuthenticationEntryPoint.java
@@ -0,0 +1,25 @@
+package com.github.floriangubler.security;
+
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.web.AuthenticationEntryPoint;
+import org.springframework.stereotype.Component;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.io.Serializable;
+
+
+@Component
+public
+class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint, Serializable {
+
+    @Override
+    public void commence(
+            HttpServletRequest request,
+            HttpServletResponse response,
+            AuthenticationException authException
+    ) throws IOException {
+        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/github/floriangubler/security/JwtAuthenticationFilter.java b/src/main/java/com/github/floriangubler/security/JwtAuthenticationFilter.java
new file mode 100644
index 0000000..a380aef
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/security/JwtAuthenticationFilter.java
@@ -0,0 +1,67 @@
+package com.github.floriangubler.security;
+
+import com.auth0.jwt.exceptions.JWTVerificationException;
+import com.auth0.jwt.interfaces.DecodedJWT;
+import com.github.floriangubler.repository.MemberRepository;
+import lombok.val;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.security.GeneralSecurityException;
+import java.util.ArrayList;
+import java.util.UUID;
+
+public class JwtAuthenticationFilter extends OncePerRequestFilter {
+
+    private final JwtServiceHMAC jwtService;
+    private final MemberRepository memberRepository;
+
+    public JwtAuthenticationFilter(JwtServiceHMAC jwtService, MemberRepository memberRepository) {
+        this.jwtService = jwtService;
+        this.memberRepository = memberRepository;
+    }
+
+    @Override
+    public void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {
+
+        val authToken = jwtService.resolveKey(request);
+        UUID userId = null;
+        var requestedAuthorities = new ArrayList<String>();
+
+        if (authToken != null) {
+            DecodedJWT decoded;
+            try {
+                decoded = jwtService.verifyJwt(authToken, true);
+                userId = UUID.fromString(decoded.getClaim("user_id").asString());
+                requestedAuthorities = jwtService.getRequestedAuthorities(decoded);
+            } catch (GeneralSecurityException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        if (userId != null && SecurityContextHolder.getContext().getAuthentication() == null) {
+            var optionalUser = memberRepository.findById(userId);
+
+            if (optionalUser.isEmpty()) {
+                throw new JWTVerificationException("Unauthorized");
+            }
+
+            val user = optionalUser.get();
+
+            val userDetails = jwtService.getUserDetails(user, requestedAuthorities);
+            val authentication = new UsernamePasswordAuthenticationToken(userDetails, "", userDetails.getAuthorities());
+            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
+            logger.debug("authenticated user $userId, setting security context");
+            SecurityContextHolder.getContext().setAuthentication(authentication);
+        }
+
+        chain.doFilter(request, response);
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/security/JwtServiceHMAC.java b/src/main/java/com/github/floriangubler/security/JwtServiceHMAC.java
new file mode 100644
index 0000000..e80aa87
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/security/JwtServiceHMAC.java
@@ -0,0 +1,146 @@
+package com.github.floriangubler.security;
+
+import com.auth0.jwt.JWT;
+import com.auth0.jwt.algorithms.Algorithm;
+import com.auth0.jwt.exceptions.AlgorithmMismatchException;
+import com.auth0.jwt.exceptions.InvalidClaimException;
+import com.auth0.jwt.exceptions.SignatureVerificationException;
+import com.auth0.jwt.exceptions.TokenExpiredException;
+import com.auth0.jwt.interfaces.DecodedJWT;
+import com.github.floriangubler.model.MemberEntity;
+import com.github.floriangubler.repository.MemberRepository;
+import lombok.val;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.User;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+
+import javax.servlet.http.HttpServletRequest;
+import java.io.IOException;
+import java.security.GeneralSecurityException;
+import java.time.LocalDateTime;
+import java.time.ZoneId;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.UUID;
+
+@Service
+public class JwtServiceHMAC implements UserDetailsService {
+    @Autowired
+    private MemberRepository memberRepository;
+
+    private final String secret = "YcMyGyq?q&SAy86MR!h";
+
+    public UserDetails getUserDetails(MemberEntity user, List<String> requestedAuthorities) {
+        return new User(user.getId().toString(), "", getAuthority(requestedAuthorities));
+    }
+
+    @Override
+    public UserDetails loadUserByUsername(String userId) throws UsernameNotFoundException {
+        val user = memberRepository.findById(UUID.fromString(userId)).orElseGet(null);
+        if (user == null) {
+            throw new UsernameNotFoundException("User not found");
+        }
+
+        return new User(user.getId().toString(), "", new ArrayList<SimpleGrantedAuthority>());
+    }
+
+    public List<SimpleGrantedAuthority> getAuthority(List<String> requestedAuthorities) {
+        return requestedAuthorities.stream().map(SimpleGrantedAuthority::new).toList();
+    }
+
+    public ArrayList<String> getRequestedAuthorities(DecodedJWT decoded) {
+        var rolesRaw = decoded.getClaim("roles").asList(String.class);
+        if (rolesRaw == null) {
+            rolesRaw = new ArrayList<>();
+        }
+        var scopesRaw = decoded.getClaim("scope").asList(String.class);
+        if (scopesRaw == null) {
+            scopesRaw = new ArrayList<>();
+        }
+
+        val requestedAuthorities = new ArrayList<String>();
+        requestedAuthorities.addAll(rolesRaw.stream().map(role -> "ROLE_" + role).toList());
+        requestedAuthorities.addAll(scopesRaw.stream().map(scope -> "ROLE_" + scope).toList());
+
+        return requestedAuthorities;
+    }
+
+    /**
+     * Perform the verification against the given Token
+     *
+     * @param encodedJwt        to verify.
+     * @param expectAccessToken is the provided token an access token.
+     * @return a verified and decoded JWT.
+     * @throws AlgorithmMismatchException     if the algorithm stated in the token's header it's not equal to the one defined in the JWTVerifier.
+     * @throws SignatureVerificationException if the signature is invalid.
+     * @throws TokenExpiredException          if the token has expired.
+     * @throws InvalidClaimException          if a claim contained a different value than the expected one.
+     */
+    public DecodedJWT verifyJwt(String encodedJwt, Boolean expectAccessToken) throws AlgorithmMismatchException, SignatureVerificationException, TokenExpiredException, InvalidClaimException, GeneralSecurityException, IOException {
+        var algorithm = Algorithm.HMAC512(getSecret());
+
+        var verifier = JWT.require(algorithm).withClaim("typ", "Bearer").build();
+
+        if (!expectAccessToken) {
+            verifier = JWT.require(algorithm).withClaim("typ", "Refresh").build();
+        }
+
+        return verifier.verify(encodedJwt);
+    }
+
+    public String getSecret() {
+        return secret;
+    }
+
+    public String resolveKey(HttpServletRequest request) {
+        val bearerToken = request.getHeader("Authorization");
+        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
+            return bearerToken.substring(7);
+        } else {
+            return null;
+        }
+    }
+
+    public String createNewJWT(String JWTId, String userId, String name, List<String> scopes) {
+        val now = LocalDateTime.now();
+
+        val newJWT = JWT.create();
+        newJWT.withClaim("jti", JWTId);
+        newJWT.withClaim("name", name);
+        newJWT.withClaim("user_id", userId);
+        newJWT.withClaim("typ", "Bearer");
+        newJWT.withClaim("scope", scopes);
+        newJWT.withIssuedAt(convertToDate(now));
+        newJWT.withExpiresAt(convertToDate(now.plusDays(1)));
+
+        val algorithm = Algorithm.HMAC512(getSecret());
+
+        return newJWT.sign(algorithm);
+    }
+
+    public String createNewJWTRefresh(String JWTId, String userId) {
+        val now = LocalDateTime.now();
+
+        val newJWT = JWT.create();
+        newJWT.withClaim("jti", JWTId);
+        newJWT.withClaim("typ", "Refresh");
+        newJWT.withClaim("user_id", userId);
+        newJWT.withIssuedAt(convertToDate(now));
+        newJWT.withExpiresAt(convertToDate(now.plusDays(14)));
+
+        val algorithm = Algorithm.HMAC512(getSecret());
+
+        return newJWT.sign(algorithm);
+    }
+
+    private Date convertToDate(LocalDateTime dateToConvert) {
+        return java.util.Date
+                .from(dateToConvert.atZone(ZoneId.systemDefault())
+                        .toInstant());
+    }
+}
diff --git a/src/main/java/com/github/floriangubler/service/BookingService.java b/src/main/java/com/github/floriangubler/service/BookingService.java
new file mode 100644
index 0000000..5aff879
--- /dev/null
+++ b/src/main/java/com/github/floriangubler/service/BookingService.java
@@ -0,0 +1,77 @@
+package com.github.floriangubler.service;
+
+import com.github.floriangubler.exception.BookingNotFoundException;
+import com.github.floriangubler.model.BookingEntity;
+import com.github.floriangubler.model.BookingStatus;
+import com.github.floriangubler.repository.BookingRepository;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+@Service
+@Slf4j
+public class BookingService {
+
+    private final BookingRepository repository;
+    private final String ADMINROLE = "ROLE_ADMIN";
+
+    BookingService(BookingRepository repository) {
+        this.repository = repository;
+    }
+
+    public List<BookingEntity> findUserBookings(UUID memberID) {
+        log.info("Executing find all User Bookings ...");
+        return repository.findAllByMemberId(memberID);
+    }
+
+    public List<BookingEntity> findBookings(Boolean anonymise) {
+        log.info("Executing find all User Bookings ...");
+        List<BookingEntity> result = repository.findAll();
+        if(anonymise){
+            for(BookingEntity booking : result){
+                booking.setMember(null);
+                booking.setId(null);
+            }
+        }
+        return result;
+    }
+
+    public Optional<BookingEntity> loadOne(UUID gameId) {
+        log.info("Executing find game with id " + gameId + " ...");
+        return repository.findById(gameId);
+    }
+
+    public BookingEntity create(BookingEntity booking, BookingStatus status) {
+        log.info("Executing create game with id " + booking.getId() + " ...");
+        return repository.save(game);
+    }
+
+    public BookingEntity update(BookingEntity updatedGame, BookingEntity bookingid) {
+        if(repository.findById(updatedGame.getId()).isPresent()){
+            log.info("Executing update game with id " + updatedGame.getId() + " ...");
+            return repository.save(updatedGame);
+        } else{
+            throw new IllegalArgumentException("Object with given id not found");
+        }
+    }
+
+    public void delete(UUID bookingid, Authentication authentication) {
+        Optional<BookingEntity> delbooking = repository.findById(bookingid);
+        if(delbooking.isPresent()){
+            //Auth User is owner of Booking or is Admin
+            if(delbooking.get().getMember().getId().equals(UUID.fromString(authentication.getName())) || authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet()).contains(ADMINROLE)){
+                log.info("Executing delete Booking with id " + bookingid + " ...");
+                repository.deleteById(bookingid);
+            }
+        } else{
+            throw new BookingNotFoundException("Requested Booking to delete not found");
+        }
+    }
+
+}
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
new file mode 100644
index 0000000..03db408
--- /dev/null
+++ b/src/main/resources/application.yml
@@ -0,0 +1,18 @@
+spring:
+  main:
+    banner-mode: off
+  datasource:
+    url: jdbc:h2:file:./database.h2
+    driverClassName: org.h2.Driver
+    username: admin
+    password: test123
+  jpa:
+    database-platform: org.hibernate.dialect.H2Dialect
+    defer-datasource-initialization: true
+    hibernate:
+      ddl-auto: create-drop
+  sql:
+    init:
+      mode: always
+  h2:
+    console.enabled: true
diff --git a/src/main/resources/data.sql b/src/main/resources/data.sql
new file mode 100644
index 0000000..f5c38b2
--- /dev/null
+++ b/src/main/resources/data.sql
@@ -0,0 +1,9 @@
+INSERT INTO MEMBER (id, email, firstname, lastname, password_hash, is_admin)
+VALUES ('9135f12e-1b66-4ee6-bbae-df37303cc154', 'admin@test.ch', 'Admin', 'User', '$2a$10$aDD6I9Ej5.W8busvlsdPx.JvMWyJX8cOeOfVb.3q73KH2swww/N9C', true); -- Password: password1234
+INSERT INTO MEMBER (id, email, firstname, lastname, password_hash, is_admin)
+VALUES ('9135f11e-1b66-4ee6-bbae-df37303cc154', 'user@test.ch', 'User', 'Account', '$2a$10$aDD6I9Ej5.W8busvlsdPx.JvMWyJX8cOeOfVb.3q73KH2swww/N9C', false); -- Password: password1234
+
+INSERT INTO BOOKING (id, member, date, time, status)
+VALUES ('413e2297-b84b-42ef-97ed-16a8a9d1d671', '9135f12e-1b66-4ee6-bbae-df37303cc154', '2022-09-22', 'MORNING', 'APPROVED'),
+       ('b8160463-01a0-4c7a-bd46-5b3716dbe4c6', '9135f12e-1b66-4ee6-bbae-df37303cc154', '2022-09-25', 'DAY', 'DECLINED'),
+       ('3c13c533-fbac-4881-b94d-f95cb2ef16c8', '9135f11e-1b66-4ee6-bbae-df37303cc154', '2022-10-08', 'DAY', 'ORDERED');
\ No newline at end of file
diff --git a/src/test/java/com/github/floriangubler/CoworkspaceManagerIntegrationTest.java b/src/test/java/com/github/floriangubler/CoworkspaceManagerIntegrationTest.java
new file mode 100644
index 0000000..aa8f32e
--- /dev/null
+++ b/src/test/java/com/github/floriangubler/CoworkspaceManagerIntegrationTest.java
@@ -0,0 +1,50 @@
+package com.github.floriangubler;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.floriangubler.model.BookingEntity;
+import com.github.floriangubler.security.JwtServiceHMAC;
+import lombok.val;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.web.servlet.MockMvc;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@SpringBootTest
+@AutoConfigureMockMvc
+public class CoworkspaceManagerIntegrationTest {
+
+	@Autowired
+	private MockMvc mockMvc;
+
+	@Autowired
+	private JwtServiceHMAC jwtService;
+
+	@Autowired
+	private ObjectMapper objectMapper;
+
+	@Test
+	public void allGamesShouldBeReturnedFromService() throws Exception {
+		val accessToken = jwtService.createNewJWT(UUID.randomUUID().toString(), "9135f12e-1b66-4ee6-bbae-df37303cc154", "admin", List.of("ADMIN"));
+
+		val response = mockMvc.perform(get("/api/booking").header("Authorization", "Bearer " + accessToken))
+				.andExpect(status().isOk())
+				.andDo(print())
+				.andReturn();
+
+		List<BookingEntity> games = objectMapper.readValue(response.getResponse().getContentAsString(), new TypeReference<>() {});
+
+		assertEquals(3, games.size());
+	}
+
+}
\ No newline at end of file
